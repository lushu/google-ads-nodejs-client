// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import {describe, it} from 'mocha';
import * as biddingseasonalityadjustmentserviceModule from '../src';

import {protobuf} from 'google-gax';

// Dynamically loaded proto JSON is needed to get the type information
// to fill in default values for request objects
const root = protobuf.Root.fromJSON(require('../protos/protos.json')).resolveAll();

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getTypeDefaultValue(typeName: string, fields: string[]) {
    let type = root.lookupType(typeName) as protobuf.Type;
    for (const field of fields.slice(0, -1)) {
        type = type.fields[field]?.resolvedType as protobuf.Type;
    }
    return type.fields[fields[fields.length - 1]]?.defaultValue;
}

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v17.BiddingSeasonalityAdjustmentServiceClient', () => {
    describe('Common methods', () => {
        it('has apiEndpoint', () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient();
            const apiEndpoint = client.apiEndpoint;
            assert.strictEqual(apiEndpoint, 'googleads.googleapis.com');
        });

        it('has universeDomain', () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient();
            const universeDomain = client.universeDomain;
            assert.strictEqual(universeDomain, "googleapis.com");
        });

        if (typeof process === 'object' && typeof process.emitWarning === 'function') {
            it('throws DeprecationWarning if static servicePath is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const servicePath = biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient.servicePath;
                assert.strictEqual(servicePath, 'googleads.googleapis.com');
                assert(stub.called);
                stub.restore();
            });

            it('throws DeprecationWarning if static apiEndpoint is used', () => {
                const stub = sinon.stub(process, 'emitWarning');
                const apiEndpoint = biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient.apiEndpoint;
                assert.strictEqual(apiEndpoint, 'googleads.googleapis.com');
                assert(stub.called);
                stub.restore();
            });
        }
        it('sets apiEndpoint according to universe domain camelCase', () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({universeDomain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'googleads.example.com');
        });

        it('sets apiEndpoint according to universe domain snakeCase', () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({universe_domain: 'example.com'});
            const servicePath = client.apiEndpoint;
            assert.strictEqual(servicePath, 'googleads.example.com');
        });

        if (typeof process === 'object' && 'env' in process) {
            describe('GOOGLE_CLOUD_UNIVERSE_DOMAIN environment variable', () => {
                it('sets apiEndpoint from environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient();
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'googleads.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });

                it('value configured in code has priority over environment variable', () => {
                    const saved = process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = 'example.com';
                    const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({universeDomain: 'configured.example.com'});
                    const servicePath = client.apiEndpoint;
                    assert.strictEqual(servicePath, 'googleads.configured.example.com');
                    if (saved) {
                        process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'] = saved;
                    } else {
                        delete process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN'];
                    }
                });
            });
        }
        it('does not allow setting both universeDomain and universe_domain', () => {
            assert.throws(() => { new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({universe_domain: 'example.com', universeDomain: 'example.net'}); });
        });

        it('has port', () => {
            const port = biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient.port;
            assert(port);
            assert(typeof port === 'number');
        });

        it('should create a client with no option', () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient();
            assert(client);
        });

        it('should create a client with gRPC fallback', () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                fallback: true,
            });
            assert(client);
        });

        it('has initialize method and supports deferred initialization', async () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.biddingSeasonalityAdjustmentServiceStub, undefined);
            await client.initialize();
            assert(client.biddingSeasonalityAdjustmentServiceStub);
        });

        it('has close method for the initialized client', done => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            assert(client.biddingSeasonalityAdjustmentServiceStub);
            client.close().then(() => {
                done();
            });
        });

        it('has close method for the non-initialized client', done => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            assert.strictEqual(client.biddingSeasonalityAdjustmentServiceStub, undefined);
            client.close().then(() => {
                done();
            });
        });

        it('has getProjectId method', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
            const result = await client.getProjectId();
            assert.strictEqual(result, fakeProjectId);
            assert((client.auth.getProjectId as SinonStub).calledWithExactly());
        });

        it('has getProjectId method with callback', async () => {
            const fakeProjectId = 'fake-project-id';
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
            const promise = new Promise((resolve, reject) => {
                client.getProjectId((err?: Error|null, projectId?: string|null) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(projectId);
                    }
                });
            });
            const result = await promise;
            assert.strictEqual(result, fakeProjectId);
        });
    });

    describe('mutateBiddingSeasonalityAdjustments', () => {
        it('invokes mutateBiddingSeasonalityAdjustments without error', async () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest', ['customerId']);
            request.customerId = defaultValue1;
            const expectedHeaderRequestParams = `customer_id=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsResponse()
            );
            client.innerApiCalls.mutateBiddingSeasonalityAdjustments = stubSimpleCall(expectedResponse);
            const [response] = await client.mutateBiddingSeasonalityAdjustments(request);
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.mutateBiddingSeasonalityAdjustments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.mutateBiddingSeasonalityAdjustments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes mutateBiddingSeasonalityAdjustments without error using callback', async () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest', ['customerId']);
            request.customerId = defaultValue1;
            const expectedHeaderRequestParams = `customer_id=${defaultValue1}`;
            const expectedResponse = generateSampleMessage(
              new protos.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsResponse()
            );
            client.innerApiCalls.mutateBiddingSeasonalityAdjustments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mutateBiddingSeasonalityAdjustments(
                    request,
                    (err?: Error|null, result?: protos.google.ads.googleads.v17.services.IMutateBiddingSeasonalityAdjustmentsResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            const actualRequest = (client.innerApiCalls.mutateBiddingSeasonalityAdjustments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.mutateBiddingSeasonalityAdjustments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes mutateBiddingSeasonalityAdjustments with error', async () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest', ['customerId']);
            request.customerId = defaultValue1;
            const expectedHeaderRequestParams = `customer_id=${defaultValue1}`;
            const expectedError = new Error('expected');
            client.innerApiCalls.mutateBiddingSeasonalityAdjustments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mutateBiddingSeasonalityAdjustments(request), expectedError);
            const actualRequest = (client.innerApiCalls.mutateBiddingSeasonalityAdjustments as SinonStub)
                .getCall(0).args[0];
            assert.deepStrictEqual(actualRequest, request);
            const actualHeaderRequestParams = (client.innerApiCalls.mutateBiddingSeasonalityAdjustments as SinonStub)
                .getCall(0).args[1].otherArgs.headers['x-goog-request-params'];
            assert(actualHeaderRequestParams.includes(expectedHeaderRequestParams));
        });

        it('invokes mutateBiddingSeasonalityAdjustments with closed client', async () => {
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
              credentials: {client_email: 'bogus', private_key: 'bogus'},
              projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(
              new protos.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest()
            );
            const defaultValue1 =
              getTypeDefaultValue('.google.ads.googleads.v17.services.MutateBiddingSeasonalityAdjustmentsRequest', ['customerId']);
            request.customerId = defaultValue1;
            const expectedError = new Error('The client has already been closed.');
            client.close();
            await assert.rejects(client.mutateBiddingSeasonalityAdjustments(request), expectedError);
        });
    });

    describe('Path templates', () => {

        describe('accessibleBiddingStrategy', () => {
            const fakePath = "/rendered/path/accessibleBiddingStrategy";
            const expectedParameters = {
                customer_id: "customerIdValue",
                bidding_strategy_id: "biddingStrategyIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accessibleBiddingStrategyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accessibleBiddingStrategyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accessibleBiddingStrategyPath', () => {
                const result = client.accessibleBiddingStrategyPath("customerIdValue", "biddingStrategyIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accessibleBiddingStrategyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAccessibleBiddingStrategyName', () => {
                const result = client.matchCustomerIdFromAccessibleBiddingStrategyName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.accessibleBiddingStrategyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBiddingStrategyIdFromAccessibleBiddingStrategyName', () => {
                const result = client.matchBiddingStrategyIdFromAccessibleBiddingStrategyName(fakePath);
                assert.strictEqual(result, "biddingStrategyIdValue");
                assert((client.pathTemplates.accessibleBiddingStrategyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('accountBudget', () => {
            const fakePath = "/rendered/path/accountBudget";
            const expectedParameters = {
                customer_id: "customerIdValue",
                account_budget_id: "accountBudgetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountBudgetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountBudgetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountBudgetPath', () => {
                const result = client.accountBudgetPath("customerIdValue", "accountBudgetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountBudgetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAccountBudgetName', () => {
                const result = client.matchCustomerIdFromAccountBudgetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.accountBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAccountBudgetIdFromAccountBudgetName', () => {
                const result = client.matchAccountBudgetIdFromAccountBudgetName(fakePath);
                assert.strictEqual(result, "accountBudgetIdValue");
                assert((client.pathTemplates.accountBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('accountBudgetProposal', () => {
            const fakePath = "/rendered/path/accountBudgetProposal";
            const expectedParameters = {
                customer_id: "customerIdValue",
                account_budget_proposal_id: "accountBudgetProposalIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountBudgetProposalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountBudgetProposalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountBudgetProposalPath', () => {
                const result = client.accountBudgetProposalPath("customerIdValue", "accountBudgetProposalIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountBudgetProposalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAccountBudgetProposalName', () => {
                const result = client.matchCustomerIdFromAccountBudgetProposalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.accountBudgetProposalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAccountBudgetProposalIdFromAccountBudgetProposalName', () => {
                const result = client.matchAccountBudgetProposalIdFromAccountBudgetProposalName(fakePath);
                assert.strictEqual(result, "accountBudgetProposalIdValue");
                assert((client.pathTemplates.accountBudgetProposalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('accountLink', () => {
            const fakePath = "/rendered/path/accountLink";
            const expectedParameters = {
                customer_id: "customerIdValue",
                account_link_id: "accountLinkIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountLinkPath', () => {
                const result = client.accountLinkPath("customerIdValue", "accountLinkIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAccountLinkName', () => {
                const result = client.matchCustomerIdFromAccountLinkName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.accountLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAccountLinkIdFromAccountLinkName', () => {
                const result = client.matchAccountLinkIdFromAccountLinkName(fakePath);
                assert.strictEqual(result, "accountLinkIdValue");
                assert((client.pathTemplates.accountLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ad', () => {
            const fakePath = "/rendered/path/ad";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_id: "adIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adPath', () => {
                const result = client.adPath("customerIdValue", "adIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdName', () => {
                const result = client.matchCustomerIdFromAdName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdIdFromAdName', () => {
                const result = client.matchAdIdFromAdName(fakePath);
                assert.strictEqual(result, "adIdValue");
                assert((client.pathTemplates.adPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroup', () => {
            const fakePath = "/rendered/path/adGroup";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupPath', () => {
                const result = client.adGroupPath("customerIdValue", "adGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupName', () => {
                const result = client.matchCustomerIdFromAdGroupName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupName', () => {
                const result = client.matchAdGroupIdFromAdGroupName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAd', () => {
            const fakePath = "/rendered/path/adGroupAd";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                ad_id: "adIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdPath', () => {
                const result = client.adGroupAdPath("customerIdValue", "adGroupIdValue", "adIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAdName', () => {
                const result = client.matchCustomerIdFromAdGroupAdName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAdName', () => {
                const result = client.matchAdGroupIdFromAdGroupAdName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdIdFromAdGroupAdName', () => {
                const result = client.matchAdIdFromAdGroupAdName(fakePath);
                assert.strictEqual(result, "adIdValue");
                assert((client.pathTemplates.adGroupAdPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAdAssetCombinationView', () => {
            const fakePath = "/rendered/path/adGroupAdAssetCombinationView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                ad_id: "adIdValue",
                asset_combination_id_low: "assetCombinationIdLowValue",
                asset_combination_id_high: "assetCombinationIdHighValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdAssetCombinationViewPath', () => {
                const result = client.adGroupAdAssetCombinationViewPath("customerIdValue", "adGroupIdValue", "adIdValue", "assetCombinationIdLowValue", "assetCombinationIdHighValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAdAssetCombinationViewName', () => {
                const result = client.matchCustomerIdFromAdGroupAdAssetCombinationViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAdAssetCombinationViewName', () => {
                const result = client.matchAdGroupIdFromAdGroupAdAssetCombinationViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdIdFromAdGroupAdAssetCombinationViewName', () => {
                const result = client.matchAdIdFromAdGroupAdAssetCombinationViewName(fakePath);
                assert.strictEqual(result, "adIdValue");
                assert((client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetCombinationIdLowFromAdGroupAdAssetCombinationViewName', () => {
                const result = client.matchAssetCombinationIdLowFromAdGroupAdAssetCombinationViewName(fakePath);
                assert.strictEqual(result, "assetCombinationIdLowValue");
                assert((client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetCombinationIdHighFromAdGroupAdAssetCombinationViewName', () => {
                const result = client.matchAssetCombinationIdHighFromAdGroupAdAssetCombinationViewName(fakePath);
                assert.strictEqual(result, "assetCombinationIdHighValue");
                assert((client.pathTemplates.adGroupAdAssetCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAdAssetView', () => {
            const fakePath = "/rendered/path/adGroupAdAssetView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                ad_id: "adIdValue",
                asset_id: "assetIdValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdAssetViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdAssetViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdAssetViewPath', () => {
                const result = client.adGroupAdAssetViewPath("customerIdValue", "adGroupIdValue", "adIdValue", "assetIdValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAdAssetViewName', () => {
                const result = client.matchCustomerIdFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAdAssetViewName', () => {
                const result = client.matchAdGroupIdFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdIdFromAdGroupAdAssetViewName', () => {
                const result = client.matchAdIdFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "adIdValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromAdGroupAdAssetViewName', () => {
                const result = client.matchAssetIdFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromAdGroupAdAssetViewName', () => {
                const result = client.matchFieldTypeFromAdGroupAdAssetViewName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.adGroupAdAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAdLabel', () => {
            const fakePath = "/rendered/path/adGroupAdLabel";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                ad_id: "adIdValue",
                label_id: "labelIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAdLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAdLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAdLabelPath', () => {
                const result = client.adGroupAdLabelPath("customerIdValue", "adGroupIdValue", "adIdValue", "labelIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAdLabelName', () => {
                const result = client.matchCustomerIdFromAdGroupAdLabelName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAdLabelName', () => {
                const result = client.matchAdGroupIdFromAdGroupAdLabelName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdIdFromAdGroupAdLabelName', () => {
                const result = client.matchAdIdFromAdGroupAdLabelName(fakePath);
                assert.strictEqual(result, "adIdValue");
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelIdFromAdGroupAdLabelName', () => {
                const result = client.matchLabelIdFromAdGroupAdLabelName(fakePath);
                assert.strictEqual(result, "labelIdValue");
                assert((client.pathTemplates.adGroupAdLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAsset', () => {
            const fakePath = "/rendered/path/adGroupAsset";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                asset_id: "assetIdValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAssetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAssetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAssetPath', () => {
                const result = client.adGroupAssetPath("customerIdValue", "adGroupIdValue", "assetIdValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAssetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAssetName', () => {
                const result = client.matchCustomerIdFromAdGroupAssetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAssetName', () => {
                const result = client.matchAdGroupIdFromAdGroupAssetName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromAdGroupAssetName', () => {
                const result = client.matchAssetIdFromAdGroupAssetName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.adGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromAdGroupAssetName', () => {
                const result = client.matchFieldTypeFromAdGroupAssetName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.adGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAssetSet', () => {
            const fakePath = "/rendered/path/adGroupAssetSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                asset_set_id: "assetSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAssetSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAssetSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAssetSetPath', () => {
                const result = client.adGroupAssetSetPath("customerIdValue", "adGroupIdValue", "assetSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAssetSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAssetSetName', () => {
                const result = client.matchCustomerIdFromAdGroupAssetSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAssetSetName', () => {
                const result = client.matchAdGroupIdFromAdGroupAssetSetName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSetIdFromAdGroupAssetSetName', () => {
                const result = client.matchAssetSetIdFromAdGroupAssetSetName(fakePath);
                assert.strictEqual(result, "assetSetIdValue");
                assert((client.pathTemplates.adGroupAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupAudienceView', () => {
            const fakePath = "/rendered/path/adGroupAudienceView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupAudienceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupAudienceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupAudienceViewPath', () => {
                const result = client.adGroupAudienceViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupAudienceViewName', () => {
                const result = client.matchCustomerIdFromAdGroupAudienceViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupAudienceViewName', () => {
                const result = client.matchAdGroupIdFromAdGroupAudienceViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdGroupAudienceViewName', () => {
                const result = client.matchCriterionIdFromAdGroupAudienceViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adGroupAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupBidModifier', () => {
            const fakePath = "/rendered/path/adGroupBidModifier";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupBidModifierPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupBidModifierPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupBidModifierPath', () => {
                const result = client.adGroupBidModifierPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupBidModifierName', () => {
                const result = client.matchCustomerIdFromAdGroupBidModifierName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupBidModifierName', () => {
                const result = client.matchAdGroupIdFromAdGroupBidModifierName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdGroupBidModifierName', () => {
                const result = client.matchCriterionIdFromAdGroupBidModifierName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adGroupBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterion', () => {
            const fakePath = "/rendered/path/adGroupCriterion";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionPath', () => {
                const result = client.adGroupCriterionPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupCriterionName', () => {
                const result = client.matchCustomerIdFromAdGroupCriterionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupCriterionName', () => {
                const result = client.matchAdGroupIdFromAdGroupCriterionName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdGroupCriterionName', () => {
                const result = client.matchCriterionIdFromAdGroupCriterionName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adGroupCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterionCustomizer', () => {
            const fakePath = "/rendered/path/adGroupCriterionCustomizer";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
                customizer_attribute_id: "customizerAttributeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionCustomizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionCustomizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionCustomizerPath', () => {
                const result = client.adGroupCriterionCustomizerPath("customerIdValue", "adGroupIdValue", "criterionIdValue", "customizerAttributeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionCustomizerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupCriterionCustomizerName', () => {
                const result = client.matchCustomerIdFromAdGroupCriterionCustomizerName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupCriterionCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupCriterionCustomizerName', () => {
                const result = client.matchAdGroupIdFromAdGroupCriterionCustomizerName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupCriterionCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdGroupCriterionCustomizerName', () => {
                const result = client.matchCriterionIdFromAdGroupCriterionCustomizerName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adGroupCriterionCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomizerAttributeIdFromAdGroupCriterionCustomizerName', () => {
                const result = client.matchCustomizerAttributeIdFromAdGroupCriterionCustomizerName(fakePath);
                assert.strictEqual(result, "customizerAttributeIdValue");
                assert((client.pathTemplates.adGroupCriterionCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterionLabel', () => {
            const fakePath = "/rendered/path/adGroupCriterionLabel";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
                label_id: "labelIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionLabelPath', () => {
                const result = client.adGroupCriterionLabelPath("customerIdValue", "adGroupIdValue", "criterionIdValue", "labelIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupCriterionLabelName', () => {
                const result = client.matchCustomerIdFromAdGroupCriterionLabelName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupCriterionLabelName', () => {
                const result = client.matchAdGroupIdFromAdGroupCriterionLabelName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdGroupCriterionLabelName', () => {
                const result = client.matchCriterionIdFromAdGroupCriterionLabelName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelIdFromAdGroupCriterionLabelName', () => {
                const result = client.matchLabelIdFromAdGroupCriterionLabelName(fakePath);
                assert.strictEqual(result, "labelIdValue");
                assert((client.pathTemplates.adGroupCriterionLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCriterionSimulation', () => {
            const fakePath = "/rendered/path/adGroupCriterionSimulation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
                type: "typeValue",
                modification_method: "modificationMethodValue",
                start_date: "startDateValue",
                end_date: "endDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCriterionSimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCriterionSimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCriterionSimulationPath', () => {
                const result = client.adGroupCriterionSimulationPath("customerIdValue", "adGroupIdValue", "criterionIdValue", "typeValue", "modificationMethodValue", "startDateValue", "endDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupCriterionSimulationName', () => {
                const result = client.matchCustomerIdFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupCriterionSimulationName', () => {
                const result = client.matchAdGroupIdFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdGroupCriterionSimulationName', () => {
                const result = client.matchCriterionIdFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTypeFromAdGroupCriterionSimulationName', () => {
                const result = client.matchTypeFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "typeValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchModificationMethodFromAdGroupCriterionSimulationName', () => {
                const result = client.matchModificationMethodFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "modificationMethodValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStartDateFromAdGroupCriterionSimulationName', () => {
                const result = client.matchStartDateFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "startDateValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEndDateFromAdGroupCriterionSimulationName', () => {
                const result = client.matchEndDateFromAdGroupCriterionSimulationName(fakePath);
                assert.strictEqual(result, "endDateValue");
                assert((client.pathTemplates.adGroupCriterionSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupCustomizer', () => {
            const fakePath = "/rendered/path/adGroupCustomizer";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                customizer_attribute_id: "customizerAttributeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupCustomizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupCustomizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupCustomizerPath', () => {
                const result = client.adGroupCustomizerPath("customerIdValue", "adGroupIdValue", "customizerAttributeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupCustomizerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupCustomizerName', () => {
                const result = client.matchCustomerIdFromAdGroupCustomizerName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupCustomizerName', () => {
                const result = client.matchAdGroupIdFromAdGroupCustomizerName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomizerAttributeIdFromAdGroupCustomizerName', () => {
                const result = client.matchCustomizerAttributeIdFromAdGroupCustomizerName(fakePath);
                assert.strictEqual(result, "customizerAttributeIdValue");
                assert((client.pathTemplates.adGroupCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupExtensionSetting', () => {
            const fakePath = "/rendered/path/adGroupExtensionSetting";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                extension_type: "extensionTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupExtensionSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupExtensionSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupExtensionSettingPath', () => {
                const result = client.adGroupExtensionSettingPath("customerIdValue", "adGroupIdValue", "extensionTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupExtensionSettingName', () => {
                const result = client.matchCustomerIdFromAdGroupExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupExtensionSettingName', () => {
                const result = client.matchAdGroupIdFromAdGroupExtensionSettingName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExtensionTypeFromAdGroupExtensionSettingName', () => {
                const result = client.matchExtensionTypeFromAdGroupExtensionSettingName(fakePath);
                assert.strictEqual(result, "extensionTypeValue");
                assert((client.pathTemplates.adGroupExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupFeed', () => {
            const fakePath = "/rendered/path/adGroupFeed";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                feed_id: "feedIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupFeedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupFeedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupFeedPath', () => {
                const result = client.adGroupFeedPath("customerIdValue", "adGroupIdValue", "feedIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupFeedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupFeedName', () => {
                const result = client.matchCustomerIdFromAdGroupFeedName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupFeedName', () => {
                const result = client.matchAdGroupIdFromAdGroupFeedName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromAdGroupFeedName', () => {
                const result = client.matchFeedIdFromAdGroupFeedName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.adGroupFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupLabel', () => {
            const fakePath = "/rendered/path/adGroupLabel";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                label_id: "labelIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupLabelPath', () => {
                const result = client.adGroupLabelPath("customerIdValue", "adGroupIdValue", "labelIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupLabelName', () => {
                const result = client.matchCustomerIdFromAdGroupLabelName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupLabelName', () => {
                const result = client.matchAdGroupIdFromAdGroupLabelName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelIdFromAdGroupLabelName', () => {
                const result = client.matchLabelIdFromAdGroupLabelName(fakePath);
                assert.strictEqual(result, "labelIdValue");
                assert((client.pathTemplates.adGroupLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adGroupSimulation', () => {
            const fakePath = "/rendered/path/adGroupSimulation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                type: "typeValue",
                modification_method: "modificationMethodValue",
                start_date: "startDateValue",
                end_date: "endDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adGroupSimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adGroupSimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adGroupSimulationPath', () => {
                const result = client.adGroupSimulationPath("customerIdValue", "adGroupIdValue", "typeValue", "modificationMethodValue", "startDateValue", "endDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adGroupSimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdGroupSimulationName', () => {
                const result = client.matchCustomerIdFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdGroupSimulationName', () => {
                const result = client.matchAdGroupIdFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTypeFromAdGroupSimulationName', () => {
                const result = client.matchTypeFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "typeValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchModificationMethodFromAdGroupSimulationName', () => {
                const result = client.matchModificationMethodFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "modificationMethodValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStartDateFromAdGroupSimulationName', () => {
                const result = client.matchStartDateFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "startDateValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEndDateFromAdGroupSimulationName', () => {
                const result = client.matchEndDateFromAdGroupSimulationName(fakePath);
                assert.strictEqual(result, "endDateValue");
                assert((client.pathTemplates.adGroupSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adParameter', () => {
            const fakePath = "/rendered/path/adParameter";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
                parameter_index: "parameterIndexValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adParameterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adParameterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adParameterPath', () => {
                const result = client.adParameterPath("customerIdValue", "adGroupIdValue", "criterionIdValue", "parameterIndexValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adParameterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdParameterName', () => {
                const result = client.matchCustomerIdFromAdParameterName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adParameterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAdParameterName', () => {
                const result = client.matchAdGroupIdFromAdParameterName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.adParameterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdParameterName', () => {
                const result = client.matchCriterionIdFromAdParameterName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adParameterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchParameterIndexFromAdParameterName', () => {
                const result = client.matchParameterIndexFromAdParameterName(fakePath);
                assert.strictEqual(result, "parameterIndexValue");
                assert((client.pathTemplates.adParameterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('adScheduleView', () => {
            const fakePath = "/rendered/path/adScheduleView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.adScheduleViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.adScheduleViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('adScheduleViewPath', () => {
                const result = client.adScheduleViewPath("customerIdValue", "campaignIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.adScheduleViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAdScheduleViewName', () => {
                const result = client.matchCustomerIdFromAdScheduleViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.adScheduleViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromAdScheduleViewName', () => {
                const result = client.matchCampaignIdFromAdScheduleViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.adScheduleViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAdScheduleViewName', () => {
                const result = client.matchCriterionIdFromAdScheduleViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.adScheduleViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('ageRangeView', () => {
            const fakePath = "/rendered/path/ageRangeView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.ageRangeViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.ageRangeViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('ageRangeViewPath', () => {
                const result = client.ageRangeViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.ageRangeViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAgeRangeViewName', () => {
                const result = client.matchCustomerIdFromAgeRangeViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.ageRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAgeRangeViewName', () => {
                const result = client.matchAdGroupIdFromAgeRangeViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.ageRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAgeRangeViewName', () => {
                const result = client.matchCriterionIdFromAgeRangeViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.ageRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('androidPrivacySharedKeyGoogleAdGroup', () => {
            const fakePath = "/rendered/path/androidPrivacySharedKeyGoogleAdGroup";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                ad_group_id: "adGroupIdValue",
                android_privacy_interaction_type: "androidPrivacyInteractionTypeValue",
                android_privacy_network_type: "androidPrivacyNetworkTypeValue",
                android_privacy_interaction_date: "androidPrivacyInteractionDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('androidPrivacySharedKeyGoogleAdGroupPath', () => {
                const result = client.androidPrivacySharedKeyGoogleAdGroupPath("customerIdValue", "campaignIdValue", "adGroupIdValue", "androidPrivacyInteractionTypeValue", "androidPrivacyNetworkTypeValue", "androidPrivacyInteractionDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAndroidPrivacySharedKeyGoogleAdGroupName', () => {
                const result = client.matchCustomerIdFromAndroidPrivacySharedKeyGoogleAdGroupName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromAndroidPrivacySharedKeyGoogleAdGroupName', () => {
                const result = client.matchCampaignIdFromAndroidPrivacySharedKeyGoogleAdGroupName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromAndroidPrivacySharedKeyGoogleAdGroupName', () => {
                const result = client.matchAdGroupIdFromAndroidPrivacySharedKeyGoogleAdGroupName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyInteractionTypeFromAndroidPrivacySharedKeyGoogleAdGroupName', () => {
                const result = client.matchAndroidPrivacyInteractionTypeFromAndroidPrivacySharedKeyGoogleAdGroupName(fakePath);
                assert.strictEqual(result, "androidPrivacyInteractionTypeValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyNetworkTypeFromAndroidPrivacySharedKeyGoogleAdGroupName', () => {
                const result = client.matchAndroidPrivacyNetworkTypeFromAndroidPrivacySharedKeyGoogleAdGroupName(fakePath);
                assert.strictEqual(result, "androidPrivacyNetworkTypeValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyInteractionDateFromAndroidPrivacySharedKeyGoogleAdGroupName', () => {
                const result = client.matchAndroidPrivacyInteractionDateFromAndroidPrivacySharedKeyGoogleAdGroupName(fakePath);
                assert.strictEqual(result, "androidPrivacyInteractionDateValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('androidPrivacySharedKeyGoogleCampaign', () => {
            const fakePath = "/rendered/path/androidPrivacySharedKeyGoogleCampaign";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                android_privacy_interaction_type: "androidPrivacyInteractionTypeValue",
                android_privacy_interaction_date: "androidPrivacyInteractionDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('androidPrivacySharedKeyGoogleCampaignPath', () => {
                const result = client.androidPrivacySharedKeyGoogleCampaignPath("customerIdValue", "campaignIdValue", "androidPrivacyInteractionTypeValue", "androidPrivacyInteractionDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAndroidPrivacySharedKeyGoogleCampaignName', () => {
                const result = client.matchCustomerIdFromAndroidPrivacySharedKeyGoogleCampaignName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromAndroidPrivacySharedKeyGoogleCampaignName', () => {
                const result = client.matchCampaignIdFromAndroidPrivacySharedKeyGoogleCampaignName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyInteractionTypeFromAndroidPrivacySharedKeyGoogleCampaignName', () => {
                const result = client.matchAndroidPrivacyInteractionTypeFromAndroidPrivacySharedKeyGoogleCampaignName(fakePath);
                assert.strictEqual(result, "androidPrivacyInteractionTypeValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyInteractionDateFromAndroidPrivacySharedKeyGoogleCampaignName', () => {
                const result = client.matchAndroidPrivacyInteractionDateFromAndroidPrivacySharedKeyGoogleCampaignName(fakePath);
                assert.strictEqual(result, "androidPrivacyInteractionDateValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('androidPrivacySharedKeyGoogleNetworkType', () => {
            const fakePath = "/rendered/path/androidPrivacySharedKeyGoogleNetworkType";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                android_privacy_interaction_type: "androidPrivacyInteractionTypeValue",
                android_privacy_network_type: "androidPrivacyNetworkTypeValue",
                android_privacy_interaction_date: "androidPrivacyInteractionDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('androidPrivacySharedKeyGoogleNetworkTypePath', () => {
                const result = client.androidPrivacySharedKeyGoogleNetworkTypePath("customerIdValue", "campaignIdValue", "androidPrivacyInteractionTypeValue", "androidPrivacyNetworkTypeValue", "androidPrivacyInteractionDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAndroidPrivacySharedKeyGoogleNetworkTypeName', () => {
                const result = client.matchCustomerIdFromAndroidPrivacySharedKeyGoogleNetworkTypeName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromAndroidPrivacySharedKeyGoogleNetworkTypeName', () => {
                const result = client.matchCampaignIdFromAndroidPrivacySharedKeyGoogleNetworkTypeName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyInteractionTypeFromAndroidPrivacySharedKeyGoogleNetworkTypeName', () => {
                const result = client.matchAndroidPrivacyInteractionTypeFromAndroidPrivacySharedKeyGoogleNetworkTypeName(fakePath);
                assert.strictEqual(result, "androidPrivacyInteractionTypeValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyNetworkTypeFromAndroidPrivacySharedKeyGoogleNetworkTypeName', () => {
                const result = client.matchAndroidPrivacyNetworkTypeFromAndroidPrivacySharedKeyGoogleNetworkTypeName(fakePath);
                assert.strictEqual(result, "androidPrivacyNetworkTypeValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidPrivacyInteractionDateFromAndroidPrivacySharedKeyGoogleNetworkTypeName', () => {
                const result = client.matchAndroidPrivacyInteractionDateFromAndroidPrivacySharedKeyGoogleNetworkTypeName(fakePath);
                assert.strictEqual(result, "androidPrivacyInteractionDateValue");
                assert((client.pathTemplates.androidPrivacySharedKeyGoogleNetworkTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('asset', () => {
            const fakePath = "/rendered/path/asset";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_id: "assetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetPath', () => {
                const result = client.assetPath("customerIdValue", "assetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetName', () => {
                const result = client.matchCustomerIdFromAssetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromAssetName', () => {
                const result = client.matchAssetIdFromAssetName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.assetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetFieldTypeView', () => {
            const fakePath = "/rendered/path/assetFieldTypeView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetFieldTypeViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetFieldTypeViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetFieldTypeViewPath', () => {
                const result = client.assetFieldTypeViewPath("customerIdValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetFieldTypeViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetFieldTypeViewName', () => {
                const result = client.matchCustomerIdFromAssetFieldTypeViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetFieldTypeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromAssetFieldTypeViewName', () => {
                const result = client.matchFieldTypeFromAssetFieldTypeViewName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.assetFieldTypeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetGroup', () => {
            const fakePath = "/rendered/path/assetGroup";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_group_id: "assetGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetGroupPath', () => {
                const result = client.assetGroupPath("customerIdValue", "assetGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetGroupName', () => {
                const result = client.matchCustomerIdFromAssetGroupName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetGroupIdFromAssetGroupName', () => {
                const result = client.matchAssetGroupIdFromAssetGroupName(fakePath);
                assert.strictEqual(result, "assetGroupIdValue");
                assert((client.pathTemplates.assetGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetGroupAsset', () => {
            const fakePath = "/rendered/path/assetGroupAsset";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_group_id: "assetGroupIdValue",
                asset_id: "assetIdValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetGroupAssetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetGroupAssetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetGroupAssetPath', () => {
                const result = client.assetGroupAssetPath("customerIdValue", "assetGroupIdValue", "assetIdValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetGroupAssetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetGroupAssetName', () => {
                const result = client.matchCustomerIdFromAssetGroupAssetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetGroupIdFromAssetGroupAssetName', () => {
                const result = client.matchAssetGroupIdFromAssetGroupAssetName(fakePath);
                assert.strictEqual(result, "assetGroupIdValue");
                assert((client.pathTemplates.assetGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromAssetGroupAssetName', () => {
                const result = client.matchAssetIdFromAssetGroupAssetName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.assetGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromAssetGroupAssetName', () => {
                const result = client.matchFieldTypeFromAssetGroupAssetName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.assetGroupAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetGroupListingGroupFilter', () => {
            const fakePath = "/rendered/path/assetGroupListingGroupFilter";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_group_id: "assetGroupIdValue",
                listing_group_filter_id: "listingGroupFilterIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetGroupListingGroupFilterPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetGroupListingGroupFilterPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetGroupListingGroupFilterPath', () => {
                const result = client.assetGroupListingGroupFilterPath("customerIdValue", "assetGroupIdValue", "listingGroupFilterIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetGroupListingGroupFilterPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetGroupListingGroupFilterName', () => {
                const result = client.matchCustomerIdFromAssetGroupListingGroupFilterName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetGroupListingGroupFilterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetGroupIdFromAssetGroupListingGroupFilterName', () => {
                const result = client.matchAssetGroupIdFromAssetGroupListingGroupFilterName(fakePath);
                assert.strictEqual(result, "assetGroupIdValue");
                assert((client.pathTemplates.assetGroupListingGroupFilterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchListingGroupFilterIdFromAssetGroupListingGroupFilterName', () => {
                const result = client.matchListingGroupFilterIdFromAssetGroupListingGroupFilterName(fakePath);
                assert.strictEqual(result, "listingGroupFilterIdValue");
                assert((client.pathTemplates.assetGroupListingGroupFilterPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetGroupProductGroupView', () => {
            const fakePath = "/rendered/path/assetGroupProductGroupView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_group_id: "assetGroupIdValue",
                listing_group_filter_id: "listingGroupFilterIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetGroupProductGroupViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetGroupProductGroupViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetGroupProductGroupViewPath', () => {
                const result = client.assetGroupProductGroupViewPath("customerIdValue", "assetGroupIdValue", "listingGroupFilterIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetGroupProductGroupViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetGroupProductGroupViewName', () => {
                const result = client.matchCustomerIdFromAssetGroupProductGroupViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetGroupProductGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetGroupIdFromAssetGroupProductGroupViewName', () => {
                const result = client.matchAssetGroupIdFromAssetGroupProductGroupViewName(fakePath);
                assert.strictEqual(result, "assetGroupIdValue");
                assert((client.pathTemplates.assetGroupProductGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchListingGroupFilterIdFromAssetGroupProductGroupViewName', () => {
                const result = client.matchListingGroupFilterIdFromAssetGroupProductGroupViewName(fakePath);
                assert.strictEqual(result, "listingGroupFilterIdValue");
                assert((client.pathTemplates.assetGroupProductGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetGroupSignal', () => {
            const fakePath = "/rendered/path/assetGroupSignal";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_group_id: "assetGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetGroupSignalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetGroupSignalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetGroupSignalPath', () => {
                const result = client.assetGroupSignalPath("customerIdValue", "assetGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetGroupSignalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetGroupSignalName', () => {
                const result = client.matchCustomerIdFromAssetGroupSignalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetGroupSignalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetGroupIdFromAssetGroupSignalName', () => {
                const result = client.matchAssetGroupIdFromAssetGroupSignalName(fakePath);
                assert.strictEqual(result, "assetGroupIdValue");
                assert((client.pathTemplates.assetGroupSignalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromAssetGroupSignalName', () => {
                const result = client.matchCriterionIdFromAssetGroupSignalName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.assetGroupSignalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetGroupTopCombinationView', () => {
            const fakePath = "/rendered/path/assetGroupTopCombinationView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_group_id: "assetGroupIdValue",
                asset_combination_category: "assetCombinationCategoryValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetGroupTopCombinationViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetGroupTopCombinationViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetGroupTopCombinationViewPath', () => {
                const result = client.assetGroupTopCombinationViewPath("customerIdValue", "assetGroupIdValue", "assetCombinationCategoryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetGroupTopCombinationViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetGroupTopCombinationViewName', () => {
                const result = client.matchCustomerIdFromAssetGroupTopCombinationViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetGroupTopCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetGroupIdFromAssetGroupTopCombinationViewName', () => {
                const result = client.matchAssetGroupIdFromAssetGroupTopCombinationViewName(fakePath);
                assert.strictEqual(result, "assetGroupIdValue");
                assert((client.pathTemplates.assetGroupTopCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetCombinationCategoryFromAssetGroupTopCombinationViewName', () => {
                const result = client.matchAssetCombinationCategoryFromAssetGroupTopCombinationViewName(fakePath);
                assert.strictEqual(result, "assetCombinationCategoryValue");
                assert((client.pathTemplates.assetGroupTopCombinationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetSet', () => {
            const fakePath = "/rendered/path/assetSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_set_id: "assetSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetSetPath', () => {
                const result = client.assetSetPath("customerIdValue", "assetSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetSetName', () => {
                const result = client.matchCustomerIdFromAssetSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSetIdFromAssetSetName', () => {
                const result = client.matchAssetSetIdFromAssetSetName(fakePath);
                assert.strictEqual(result, "assetSetIdValue");
                assert((client.pathTemplates.assetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetSetAsset', () => {
            const fakePath = "/rendered/path/assetSetAsset";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_set_id: "assetSetIdValue",
                asset_id: "assetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetSetAssetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetSetAssetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetSetAssetPath', () => {
                const result = client.assetSetAssetPath("customerIdValue", "assetSetIdValue", "assetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetSetAssetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetSetAssetName', () => {
                const result = client.matchCustomerIdFromAssetSetAssetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetSetAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSetIdFromAssetSetAssetName', () => {
                const result = client.matchAssetSetIdFromAssetSetAssetName(fakePath);
                assert.strictEqual(result, "assetSetIdValue");
                assert((client.pathTemplates.assetSetAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromAssetSetAssetName', () => {
                const result = client.matchAssetIdFromAssetSetAssetName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.assetSetAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('assetSetTypeView', () => {
            const fakePath = "/rendered/path/assetSetTypeView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_set_type: "assetSetTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.assetSetTypeViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.assetSetTypeViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('assetSetTypeViewPath', () => {
                const result = client.assetSetTypeViewPath("customerIdValue", "assetSetTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.assetSetTypeViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAssetSetTypeViewName', () => {
                const result = client.matchCustomerIdFromAssetSetTypeViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.assetSetTypeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSetTypeFromAssetSetTypeViewName', () => {
                const result = client.matchAssetSetTypeFromAssetSetTypeViewName(fakePath);
                assert.strictEqual(result, "assetSetTypeValue");
                assert((client.pathTemplates.assetSetTypeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('audience', () => {
            const fakePath = "/rendered/path/audience";
            const expectedParameters = {
                customer_id: "customerIdValue",
                audience_id: "audienceIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.audiencePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.audiencePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('audiencePath', () => {
                const result = client.audiencePath("customerIdValue", "audienceIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.audiencePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromAudienceName', () => {
                const result = client.matchCustomerIdFromAudienceName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.audiencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAudienceIdFromAudienceName', () => {
                const result = client.matchAudienceIdFromAudienceName(fakePath);
                assert.strictEqual(result, "audienceIdValue");
                assert((client.pathTemplates.audiencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('batchJob', () => {
            const fakePath = "/rendered/path/batchJob";
            const expectedParameters = {
                customer_id: "customerIdValue",
                batch_job_id: "batchJobIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.batchJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.batchJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('batchJobPath', () => {
                const result = client.batchJobPath("customerIdValue", "batchJobIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.batchJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromBatchJobName', () => {
                const result = client.matchCustomerIdFromBatchJobName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.batchJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBatchJobIdFromBatchJobName', () => {
                const result = client.matchBatchJobIdFromBatchJobName(fakePath);
                assert.strictEqual(result, "batchJobIdValue");
                assert((client.pathTemplates.batchJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('biddingDataExclusion', () => {
            const fakePath = "/rendered/path/biddingDataExclusion";
            const expectedParameters = {
                customer_id: "customerIdValue",
                seasonality_event_id: "seasonalityEventIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.biddingDataExclusionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.biddingDataExclusionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('biddingDataExclusionPath', () => {
                const result = client.biddingDataExclusionPath("customerIdValue", "seasonalityEventIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.biddingDataExclusionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromBiddingDataExclusionName', () => {
                const result = client.matchCustomerIdFromBiddingDataExclusionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.biddingDataExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSeasonalityEventIdFromBiddingDataExclusionName', () => {
                const result = client.matchSeasonalityEventIdFromBiddingDataExclusionName(fakePath);
                assert.strictEqual(result, "seasonalityEventIdValue");
                assert((client.pathTemplates.biddingDataExclusionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('biddingSeasonalityAdjustment', () => {
            const fakePath = "/rendered/path/biddingSeasonalityAdjustment";
            const expectedParameters = {
                customer_id: "customerIdValue",
                seasonality_event_id: "seasonalityEventIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.biddingSeasonalityAdjustmentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.biddingSeasonalityAdjustmentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('biddingSeasonalityAdjustmentPath', () => {
                const result = client.biddingSeasonalityAdjustmentPath("customerIdValue", "seasonalityEventIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.biddingSeasonalityAdjustmentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromBiddingSeasonalityAdjustmentName', () => {
                const result = client.matchCustomerIdFromBiddingSeasonalityAdjustmentName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.biddingSeasonalityAdjustmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSeasonalityEventIdFromBiddingSeasonalityAdjustmentName', () => {
                const result = client.matchSeasonalityEventIdFromBiddingSeasonalityAdjustmentName(fakePath);
                assert.strictEqual(result, "seasonalityEventIdValue");
                assert((client.pathTemplates.biddingSeasonalityAdjustmentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('biddingStrategy', () => {
            const fakePath = "/rendered/path/biddingStrategy";
            const expectedParameters = {
                customer_id: "customerIdValue",
                bidding_strategy_id: "biddingStrategyIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.biddingStrategyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.biddingStrategyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('biddingStrategyPath', () => {
                const result = client.biddingStrategyPath("customerIdValue", "biddingStrategyIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.biddingStrategyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromBiddingStrategyName', () => {
                const result = client.matchCustomerIdFromBiddingStrategyName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.biddingStrategyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBiddingStrategyIdFromBiddingStrategyName', () => {
                const result = client.matchBiddingStrategyIdFromBiddingStrategyName(fakePath);
                assert.strictEqual(result, "biddingStrategyIdValue");
                assert((client.pathTemplates.biddingStrategyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('biddingStrategySimulation', () => {
            const fakePath = "/rendered/path/biddingStrategySimulation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                bidding_strategy_id: "biddingStrategyIdValue",
                type: "typeValue",
                modification_method: "modificationMethodValue",
                start_date: "startDateValue",
                end_date: "endDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.biddingStrategySimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.biddingStrategySimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('biddingStrategySimulationPath', () => {
                const result = client.biddingStrategySimulationPath("customerIdValue", "biddingStrategyIdValue", "typeValue", "modificationMethodValue", "startDateValue", "endDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromBiddingStrategySimulationName', () => {
                const result = client.matchCustomerIdFromBiddingStrategySimulationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBiddingStrategyIdFromBiddingStrategySimulationName', () => {
                const result = client.matchBiddingStrategyIdFromBiddingStrategySimulationName(fakePath);
                assert.strictEqual(result, "biddingStrategyIdValue");
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTypeFromBiddingStrategySimulationName', () => {
                const result = client.matchTypeFromBiddingStrategySimulationName(fakePath);
                assert.strictEqual(result, "typeValue");
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchModificationMethodFromBiddingStrategySimulationName', () => {
                const result = client.matchModificationMethodFromBiddingStrategySimulationName(fakePath);
                assert.strictEqual(result, "modificationMethodValue");
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStartDateFromBiddingStrategySimulationName', () => {
                const result = client.matchStartDateFromBiddingStrategySimulationName(fakePath);
                assert.strictEqual(result, "startDateValue");
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEndDateFromBiddingStrategySimulationName', () => {
                const result = client.matchEndDateFromBiddingStrategySimulationName(fakePath);
                assert.strictEqual(result, "endDateValue");
                assert((client.pathTemplates.biddingStrategySimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('billingSetup', () => {
            const fakePath = "/rendered/path/billingSetup";
            const expectedParameters = {
                customer_id: "customerIdValue",
                billing_setup_id: "billingSetupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.billingSetupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.billingSetupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('billingSetupPath', () => {
                const result = client.billingSetupPath("customerIdValue", "billingSetupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.billingSetupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromBillingSetupName', () => {
                const result = client.matchCustomerIdFromBillingSetupName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.billingSetupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBillingSetupIdFromBillingSetupName', () => {
                const result = client.matchBillingSetupIdFromBillingSetupName(fakePath);
                assert.strictEqual(result, "billingSetupIdValue");
                assert((client.pathTemplates.billingSetupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('callView', () => {
            const fakePath = "/rendered/path/callView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                call_detail_id: "callDetailIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.callViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.callViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('callViewPath', () => {
                const result = client.callViewPath("customerIdValue", "callDetailIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.callViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCallViewName', () => {
                const result = client.matchCustomerIdFromCallViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.callViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCallDetailIdFromCallViewName', () => {
                const result = client.matchCallDetailIdFromCallViewName(fakePath);
                assert.strictEqual(result, "callDetailIdValue");
                assert((client.pathTemplates.callViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaign', () => {
            const fakePath = "/rendered/path/campaign";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignPath', () => {
                const result = client.campaignPath("customerIdValue", "campaignIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignName', () => {
                const result = client.matchCustomerIdFromCampaignName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignName', () => {
                const result = client.matchCampaignIdFromCampaignName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignAggregateAssetView', () => {
            const fakePath = "/rendered/path/campaignAggregateAssetView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                asset_id: "assetIdValue",
                asset_link_source: "assetLinkSourceValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignAggregateAssetViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignAggregateAssetViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignAggregateAssetViewPath', () => {
                const result = client.campaignAggregateAssetViewPath("customerIdValue", "campaignIdValue", "assetIdValue", "assetLinkSourceValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignAggregateAssetViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignAggregateAssetViewName', () => {
                const result = client.matchCustomerIdFromCampaignAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignAggregateAssetViewName', () => {
                const result = client.matchCampaignIdFromCampaignAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromCampaignAggregateAssetViewName', () => {
                const result = client.matchAssetIdFromCampaignAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.campaignAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetLinkSourceFromCampaignAggregateAssetViewName', () => {
                const result = client.matchAssetLinkSourceFromCampaignAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "assetLinkSourceValue");
                assert((client.pathTemplates.campaignAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromCampaignAggregateAssetViewName', () => {
                const result = client.matchFieldTypeFromCampaignAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.campaignAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignAsset', () => {
            const fakePath = "/rendered/path/campaignAsset";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                asset_id: "assetIdValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignAssetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignAssetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignAssetPath', () => {
                const result = client.campaignAssetPath("customerIdValue", "campaignIdValue", "assetIdValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignAssetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignAssetName', () => {
                const result = client.matchCustomerIdFromCampaignAssetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignAssetName', () => {
                const result = client.matchCampaignIdFromCampaignAssetName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromCampaignAssetName', () => {
                const result = client.matchAssetIdFromCampaignAssetName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.campaignAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromCampaignAssetName', () => {
                const result = client.matchFieldTypeFromCampaignAssetName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.campaignAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignAssetSet', () => {
            const fakePath = "/rendered/path/campaignAssetSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                asset_set_id: "assetSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignAssetSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignAssetSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignAssetSetPath', () => {
                const result = client.campaignAssetSetPath("customerIdValue", "campaignIdValue", "assetSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignAssetSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignAssetSetName', () => {
                const result = client.matchCustomerIdFromCampaignAssetSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignAssetSetName', () => {
                const result = client.matchCampaignIdFromCampaignAssetSetName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSetIdFromCampaignAssetSetName', () => {
                const result = client.matchAssetSetIdFromCampaignAssetSetName(fakePath);
                assert.strictEqual(result, "assetSetIdValue");
                assert((client.pathTemplates.campaignAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignAudienceView', () => {
            const fakePath = "/rendered/path/campaignAudienceView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignAudienceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignAudienceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignAudienceViewPath', () => {
                const result = client.campaignAudienceViewPath("customerIdValue", "campaignIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignAudienceViewName', () => {
                const result = client.matchCustomerIdFromCampaignAudienceViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignAudienceViewName', () => {
                const result = client.matchCampaignIdFromCampaignAudienceViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromCampaignAudienceViewName', () => {
                const result = client.matchCriterionIdFromCampaignAudienceViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.campaignAudienceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignBidModifier', () => {
            const fakePath = "/rendered/path/campaignBidModifier";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignBidModifierPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignBidModifierPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignBidModifierPath', () => {
                const result = client.campaignBidModifierPath("customerIdValue", "campaignIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignBidModifierPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignBidModifierName', () => {
                const result = client.matchCustomerIdFromCampaignBidModifierName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignBidModifierName', () => {
                const result = client.matchCampaignIdFromCampaignBidModifierName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromCampaignBidModifierName', () => {
                const result = client.matchCriterionIdFromCampaignBidModifierName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.campaignBidModifierPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignBudget', () => {
            const fakePath = "/rendered/path/campaignBudget";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_budget_id: "campaignBudgetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignBudgetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignBudgetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignBudgetPath', () => {
                const result = client.campaignBudgetPath("customerIdValue", "campaignBudgetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignBudgetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignBudgetName', () => {
                const result = client.matchCustomerIdFromCampaignBudgetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignBudgetIdFromCampaignBudgetName', () => {
                const result = client.matchCampaignBudgetIdFromCampaignBudgetName(fakePath);
                assert.strictEqual(result, "campaignBudgetIdValue");
                assert((client.pathTemplates.campaignBudgetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignConversionGoal', () => {
            const fakePath = "/rendered/path/campaignConversionGoal";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                category: "categoryValue",
                source: "sourceValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignConversionGoalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignConversionGoalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignConversionGoalPath', () => {
                const result = client.campaignConversionGoalPath("customerIdValue", "campaignIdValue", "categoryValue", "sourceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignConversionGoalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignConversionGoalName', () => {
                const result = client.matchCustomerIdFromCampaignConversionGoalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignConversionGoalName', () => {
                const result = client.matchCampaignIdFromCampaignConversionGoalName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCategoryFromCampaignConversionGoalName', () => {
                const result = client.matchCategoryFromCampaignConversionGoalName(fakePath);
                assert.strictEqual(result, "categoryValue");
                assert((client.pathTemplates.campaignConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSourceFromCampaignConversionGoalName', () => {
                const result = client.matchSourceFromCampaignConversionGoalName(fakePath);
                assert.strictEqual(result, "sourceValue");
                assert((client.pathTemplates.campaignConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignCriterion', () => {
            const fakePath = "/rendered/path/campaignCriterion";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignCriterionPath', () => {
                const result = client.campaignCriterionPath("customerIdValue", "campaignIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignCriterionName', () => {
                const result = client.matchCustomerIdFromCampaignCriterionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignCriterionName', () => {
                const result = client.matchCampaignIdFromCampaignCriterionName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromCampaignCriterionName', () => {
                const result = client.matchCriterionIdFromCampaignCriterionName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.campaignCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignCustomizer', () => {
            const fakePath = "/rendered/path/campaignCustomizer";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                customizer_attribute_id: "customizerAttributeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignCustomizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignCustomizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignCustomizerPath', () => {
                const result = client.campaignCustomizerPath("customerIdValue", "campaignIdValue", "customizerAttributeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignCustomizerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignCustomizerName', () => {
                const result = client.matchCustomerIdFromCampaignCustomizerName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignCustomizerName', () => {
                const result = client.matchCampaignIdFromCampaignCustomizerName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomizerAttributeIdFromCampaignCustomizerName', () => {
                const result = client.matchCustomizerAttributeIdFromCampaignCustomizerName(fakePath);
                assert.strictEqual(result, "customizerAttributeIdValue");
                assert((client.pathTemplates.campaignCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignDraft', () => {
            const fakePath = "/rendered/path/campaignDraft";
            const expectedParameters = {
                customer_id: "customerIdValue",
                base_campaign_id: "baseCampaignIdValue",
                draft_id: "draftIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignDraftPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignDraftPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignDraftPath', () => {
                const result = client.campaignDraftPath("customerIdValue", "baseCampaignIdValue", "draftIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignDraftPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignDraftName', () => {
                const result = client.matchCustomerIdFromCampaignDraftName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignDraftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchBaseCampaignIdFromCampaignDraftName', () => {
                const result = client.matchBaseCampaignIdFromCampaignDraftName(fakePath);
                assert.strictEqual(result, "baseCampaignIdValue");
                assert((client.pathTemplates.campaignDraftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDraftIdFromCampaignDraftName', () => {
                const result = client.matchDraftIdFromCampaignDraftName(fakePath);
                assert.strictEqual(result, "draftIdValue");
                assert((client.pathTemplates.campaignDraftPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignExtensionSetting', () => {
            const fakePath = "/rendered/path/campaignExtensionSetting";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                extension_type: "extensionTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignExtensionSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignExtensionSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignExtensionSettingPath', () => {
                const result = client.campaignExtensionSettingPath("customerIdValue", "campaignIdValue", "extensionTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignExtensionSettingName', () => {
                const result = client.matchCustomerIdFromCampaignExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignExtensionSettingName', () => {
                const result = client.matchCampaignIdFromCampaignExtensionSettingName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExtensionTypeFromCampaignExtensionSettingName', () => {
                const result = client.matchExtensionTypeFromCampaignExtensionSettingName(fakePath);
                assert.strictEqual(result, "extensionTypeValue");
                assert((client.pathTemplates.campaignExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignFeed', () => {
            const fakePath = "/rendered/path/campaignFeed";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                feed_id: "feedIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignFeedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignFeedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignFeedPath', () => {
                const result = client.campaignFeedPath("customerIdValue", "campaignIdValue", "feedIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignFeedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignFeedName', () => {
                const result = client.matchCustomerIdFromCampaignFeedName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignFeedName', () => {
                const result = client.matchCampaignIdFromCampaignFeedName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromCampaignFeedName', () => {
                const result = client.matchFeedIdFromCampaignFeedName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.campaignFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignGroup', () => {
            const fakePath = "/rendered/path/campaignGroup";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_group_id: "campaignGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignGroupPath', () => {
                const result = client.campaignGroupPath("customerIdValue", "campaignGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignGroupName', () => {
                const result = client.matchCustomerIdFromCampaignGroupName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignGroupIdFromCampaignGroupName', () => {
                const result = client.matchCampaignGroupIdFromCampaignGroupName(fakePath);
                assert.strictEqual(result, "campaignGroupIdValue");
                assert((client.pathTemplates.campaignGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignLabel', () => {
            const fakePath = "/rendered/path/campaignLabel";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                label_id: "labelIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignLabelPath', () => {
                const result = client.campaignLabelPath("customerIdValue", "campaignIdValue", "labelIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignLabelName', () => {
                const result = client.matchCustomerIdFromCampaignLabelName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignLabelName', () => {
                const result = client.matchCampaignIdFromCampaignLabelName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelIdFromCampaignLabelName', () => {
                const result = client.matchLabelIdFromCampaignLabelName(fakePath);
                assert.strictEqual(result, "labelIdValue");
                assert((client.pathTemplates.campaignLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignLifecycleGoal', () => {
            const fakePath = "/rendered/path/campaignLifecycleGoal";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignLifecycleGoalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignLifecycleGoalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignLifecycleGoalPath', () => {
                const result = client.campaignLifecycleGoalPath("customerIdValue", "campaignIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignLifecycleGoalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignLifecycleGoalName', () => {
                const result = client.matchCustomerIdFromCampaignLifecycleGoalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignLifecycleGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignLifecycleGoalName', () => {
                const result = client.matchCampaignIdFromCampaignLifecycleGoalName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignLifecycleGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignSearchTermInsight', () => {
            const fakePath = "/rendered/path/campaignSearchTermInsight";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                cluster_id: "clusterIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignSearchTermInsightPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignSearchTermInsightPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignSearchTermInsightPath', () => {
                const result = client.campaignSearchTermInsightPath("customerIdValue", "campaignIdValue", "clusterIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignSearchTermInsightPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignSearchTermInsightName', () => {
                const result = client.matchCustomerIdFromCampaignSearchTermInsightName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignSearchTermInsightPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignSearchTermInsightName', () => {
                const result = client.matchCampaignIdFromCampaignSearchTermInsightName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignSearchTermInsightPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterIdFromCampaignSearchTermInsightName', () => {
                const result = client.matchClusterIdFromCampaignSearchTermInsightName(fakePath);
                assert.strictEqual(result, "clusterIdValue");
                assert((client.pathTemplates.campaignSearchTermInsightPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignSharedSet', () => {
            const fakePath = "/rendered/path/campaignSharedSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                shared_set_id: "sharedSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignSharedSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignSharedSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignSharedSetPath', () => {
                const result = client.campaignSharedSetPath("customerIdValue", "campaignIdValue", "sharedSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignSharedSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignSharedSetName', () => {
                const result = client.matchCustomerIdFromCampaignSharedSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignSharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignSharedSetName', () => {
                const result = client.matchCampaignIdFromCampaignSharedSetName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignSharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSharedSetIdFromCampaignSharedSetName', () => {
                const result = client.matchSharedSetIdFromCampaignSharedSetName(fakePath);
                assert.strictEqual(result, "sharedSetIdValue");
                assert((client.pathTemplates.campaignSharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('campaignSimulation', () => {
            const fakePath = "/rendered/path/campaignSimulation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                type: "typeValue",
                modification_method: "modificationMethodValue",
                start_date: "startDateValue",
                end_date: "endDateValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.campaignSimulationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.campaignSimulationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('campaignSimulationPath', () => {
                const result = client.campaignSimulationPath("customerIdValue", "campaignIdValue", "typeValue", "modificationMethodValue", "startDateValue", "endDateValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.campaignSimulationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCampaignSimulationName', () => {
                const result = client.matchCustomerIdFromCampaignSimulationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.campaignSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromCampaignSimulationName', () => {
                const result = client.matchCampaignIdFromCampaignSimulationName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.campaignSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTypeFromCampaignSimulationName', () => {
                const result = client.matchTypeFromCampaignSimulationName(fakePath);
                assert.strictEqual(result, "typeValue");
                assert((client.pathTemplates.campaignSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchModificationMethodFromCampaignSimulationName', () => {
                const result = client.matchModificationMethodFromCampaignSimulationName(fakePath);
                assert.strictEqual(result, "modificationMethodValue");
                assert((client.pathTemplates.campaignSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchStartDateFromCampaignSimulationName', () => {
                const result = client.matchStartDateFromCampaignSimulationName(fakePath);
                assert.strictEqual(result, "startDateValue");
                assert((client.pathTemplates.campaignSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchEndDateFromCampaignSimulationName', () => {
                const result = client.matchEndDateFromCampaignSimulationName(fakePath);
                assert.strictEqual(result, "endDateValue");
                assert((client.pathTemplates.campaignSimulationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('carrierConstant', () => {
            const fakePath = "/rendered/path/carrierConstant";
            const expectedParameters = {
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.carrierConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.carrierConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('carrierConstantPath', () => {
                const result = client.carrierConstantPath("criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.carrierConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCriterionIdFromCarrierConstantName', () => {
                const result = client.matchCriterionIdFromCarrierConstantName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.carrierConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('changeEvent', () => {
            const fakePath = "/rendered/path/changeEvent";
            const expectedParameters = {
                customer_id: "customerIdValue",
                timestamp_micros: "timestampMicrosValue",
                command_index: "commandIndexValue",
                mutate_index: "mutateIndexValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.changeEventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.changeEventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('changeEventPath', () => {
                const result = client.changeEventPath("customerIdValue", "timestampMicrosValue", "commandIndexValue", "mutateIndexValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.changeEventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromChangeEventName', () => {
                const result = client.matchCustomerIdFromChangeEventName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.changeEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTimestampMicrosFromChangeEventName', () => {
                const result = client.matchTimestampMicrosFromChangeEventName(fakePath);
                assert.strictEqual(result, "timestampMicrosValue");
                assert((client.pathTemplates.changeEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCommandIndexFromChangeEventName', () => {
                const result = client.matchCommandIndexFromChangeEventName(fakePath);
                assert.strictEqual(result, "commandIndexValue");
                assert((client.pathTemplates.changeEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMutateIndexFromChangeEventName', () => {
                const result = client.matchMutateIndexFromChangeEventName(fakePath);
                assert.strictEqual(result, "mutateIndexValue");
                assert((client.pathTemplates.changeEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('changeStatus', () => {
            const fakePath = "/rendered/path/changeStatus";
            const expectedParameters = {
                customer_id: "customerIdValue",
                change_status_id: "changeStatusIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.changeStatusPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.changeStatusPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('changeStatusPath', () => {
                const result = client.changeStatusPath("customerIdValue", "changeStatusIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.changeStatusPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromChangeStatusName', () => {
                const result = client.matchCustomerIdFromChangeStatusName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.changeStatusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChangeStatusIdFromChangeStatusName', () => {
                const result = client.matchChangeStatusIdFromChangeStatusName(fakePath);
                assert.strictEqual(result, "changeStatusIdValue");
                assert((client.pathTemplates.changeStatusPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('channelAggregateAssetView', () => {
            const fakePath = "/rendered/path/channelAggregateAssetView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                advertising_channel_type: "advertisingChannelTypeValue",
                asset_id: "assetIdValue",
                asset_source: "assetSourceValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.channelAggregateAssetViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.channelAggregateAssetViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('channelAggregateAssetViewPath', () => {
                const result = client.channelAggregateAssetViewPath("customerIdValue", "advertisingChannelTypeValue", "assetIdValue", "assetSourceValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.channelAggregateAssetViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromChannelAggregateAssetViewName', () => {
                const result = client.matchCustomerIdFromChannelAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.channelAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdvertisingChannelTypeFromChannelAggregateAssetViewName', () => {
                const result = client.matchAdvertisingChannelTypeFromChannelAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "advertisingChannelTypeValue");
                assert((client.pathTemplates.channelAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromChannelAggregateAssetViewName', () => {
                const result = client.matchAssetIdFromChannelAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.channelAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSourceFromChannelAggregateAssetViewName', () => {
                const result = client.matchAssetSourceFromChannelAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "assetSourceValue");
                assert((client.pathTemplates.channelAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromChannelAggregateAssetViewName', () => {
                const result = client.matchFieldTypeFromChannelAggregateAssetViewName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.channelAggregateAssetViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('clickView', () => {
            const fakePath = "/rendered/path/clickView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                date: "dateValue",
                gclid: "gclidValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.clickViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.clickViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('clickViewPath', () => {
                const result = client.clickViewPath("customerIdValue", "dateValue", "gclidValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.clickViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromClickViewName', () => {
                const result = client.matchCustomerIdFromClickViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.clickViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDateFromClickViewName', () => {
                const result = client.matchDateFromClickViewName(fakePath);
                assert.strictEqual(result, "dateValue");
                assert((client.pathTemplates.clickViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGclidFromClickViewName', () => {
                const result = client.matchGclidFromClickViewName(fakePath);
                assert.strictEqual(result, "gclidValue");
                assert((client.pathTemplates.clickViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('combinedAudience', () => {
            const fakePath = "/rendered/path/combinedAudience";
            const expectedParameters = {
                customer_id: "customerIdValue",
                combined_audience_id: "combinedAudienceIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.combinedAudiencePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.combinedAudiencePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('combinedAudiencePath', () => {
                const result = client.combinedAudiencePath("customerIdValue", "combinedAudienceIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.combinedAudiencePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCombinedAudienceName', () => {
                const result = client.matchCustomerIdFromCombinedAudienceName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.combinedAudiencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCombinedAudienceIdFromCombinedAudienceName', () => {
                const result = client.matchCombinedAudienceIdFromCombinedAudienceName(fakePath);
                assert.strictEqual(result, "combinedAudienceIdValue");
                assert((client.pathTemplates.combinedAudiencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversionAction', () => {
            const fakePath = "/rendered/path/conversionAction";
            const expectedParameters = {
                customer_id: "customerIdValue",
                conversion_action_id: "conversionActionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversionActionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversionActionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversionActionPath', () => {
                const result = client.conversionActionPath("customerIdValue", "conversionActionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversionActionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromConversionActionName', () => {
                const result = client.matchCustomerIdFromConversionActionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.conversionActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversionActionIdFromConversionActionName', () => {
                const result = client.matchConversionActionIdFromConversionActionName(fakePath);
                assert.strictEqual(result, "conversionActionIdValue");
                assert((client.pathTemplates.conversionActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversionCustomVariable', () => {
            const fakePath = "/rendered/path/conversionCustomVariable";
            const expectedParameters = {
                customer_id: "customerIdValue",
                conversion_custom_variable_id: "conversionCustomVariableIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversionCustomVariablePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversionCustomVariablePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversionCustomVariablePath', () => {
                const result = client.conversionCustomVariablePath("customerIdValue", "conversionCustomVariableIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversionCustomVariablePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromConversionCustomVariableName', () => {
                const result = client.matchCustomerIdFromConversionCustomVariableName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.conversionCustomVariablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversionCustomVariableIdFromConversionCustomVariableName', () => {
                const result = client.matchConversionCustomVariableIdFromConversionCustomVariableName(fakePath);
                assert.strictEqual(result, "conversionCustomVariableIdValue");
                assert((client.pathTemplates.conversionCustomVariablePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversionGoalCampaignConfig', () => {
            const fakePath = "/rendered/path/conversionGoalCampaignConfig";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversionGoalCampaignConfigPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversionGoalCampaignConfigPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversionGoalCampaignConfigPath', () => {
                const result = client.conversionGoalCampaignConfigPath("customerIdValue", "campaignIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversionGoalCampaignConfigPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromConversionGoalCampaignConfigName', () => {
                const result = client.matchCustomerIdFromConversionGoalCampaignConfigName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.conversionGoalCampaignConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromConversionGoalCampaignConfigName', () => {
                const result = client.matchCampaignIdFromConversionGoalCampaignConfigName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.conversionGoalCampaignConfigPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversionValueRule', () => {
            const fakePath = "/rendered/path/conversionValueRule";
            const expectedParameters = {
                customer_id: "customerIdValue",
                conversion_value_rule_id: "conversionValueRuleIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversionValueRulePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversionValueRulePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversionValueRulePath', () => {
                const result = client.conversionValueRulePath("customerIdValue", "conversionValueRuleIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversionValueRulePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromConversionValueRuleName', () => {
                const result = client.matchCustomerIdFromConversionValueRuleName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.conversionValueRulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversionValueRuleIdFromConversionValueRuleName', () => {
                const result = client.matchConversionValueRuleIdFromConversionValueRuleName(fakePath);
                assert.strictEqual(result, "conversionValueRuleIdValue");
                assert((client.pathTemplates.conversionValueRulePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('conversionValueRuleSet', () => {
            const fakePath = "/rendered/path/conversionValueRuleSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                conversion_value_rule_set_id: "conversionValueRuleSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.conversionValueRuleSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.conversionValueRuleSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('conversionValueRuleSetPath', () => {
                const result = client.conversionValueRuleSetPath("customerIdValue", "conversionValueRuleSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.conversionValueRuleSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromConversionValueRuleSetName', () => {
                const result = client.matchCustomerIdFromConversionValueRuleSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.conversionValueRuleSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchConversionValueRuleSetIdFromConversionValueRuleSetName', () => {
                const result = client.matchConversionValueRuleSetIdFromConversionValueRuleSetName(fakePath);
                assert.strictEqual(result, "conversionValueRuleSetIdValue");
                assert((client.pathTemplates.conversionValueRuleSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('currencyConstant', () => {
            const fakePath = "/rendered/path/currencyConstant";
            const expectedParameters = {
                code: "codeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.currencyConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.currencyConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('currencyConstantPath', () => {
                const result = client.currencyConstantPath("codeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.currencyConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCodeFromCurrencyConstantName', () => {
                const result = client.matchCodeFromCurrencyConstantName(fakePath);
                assert.strictEqual(result, "codeValue");
                assert((client.pathTemplates.currencyConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customAudience', () => {
            const fakePath = "/rendered/path/customAudience";
            const expectedParameters = {
                customer_id: "customerIdValue",
                custom_audience_id: "customAudienceIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customAudiencePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customAudiencePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customAudiencePath', () => {
                const result = client.customAudiencePath("customerIdValue", "customAudienceIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customAudiencePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomAudienceName', () => {
                const result = client.matchCustomerIdFromCustomAudienceName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customAudiencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomAudienceIdFromCustomAudienceName', () => {
                const result = client.matchCustomAudienceIdFromCustomAudienceName(fakePath);
                assert.strictEqual(result, "customAudienceIdValue");
                assert((client.pathTemplates.customAudiencePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customConversionGoal', () => {
            const fakePath = "/rendered/path/customConversionGoal";
            const expectedParameters = {
                customer_id: "customerIdValue",
                goal_id: "goalIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customConversionGoalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customConversionGoalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customConversionGoalPath', () => {
                const result = client.customConversionGoalPath("customerIdValue", "goalIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customConversionGoalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomConversionGoalName', () => {
                const result = client.matchCustomerIdFromCustomConversionGoalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGoalIdFromCustomConversionGoalName', () => {
                const result = client.matchGoalIdFromCustomConversionGoalName(fakePath);
                assert.strictEqual(result, "goalIdValue");
                assert((client.pathTemplates.customConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customInterest', () => {
            const fakePath = "/rendered/path/customInterest";
            const expectedParameters = {
                customer_id: "customerIdValue",
                custom_interest_id: "customInterestIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customInterestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customInterestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customInterestPath', () => {
                const result = client.customInterestPath("customerIdValue", "customInterestIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customInterestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomInterestName', () => {
                const result = client.matchCustomerIdFromCustomInterestName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomInterestIdFromCustomInterestName', () => {
                const result = client.matchCustomInterestIdFromCustomInterestName(fakePath);
                assert.strictEqual(result, "customInterestIdValue");
                assert((client.pathTemplates.customInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customer', () => {
            const fakePath = "/rendered/path/customer";
            const expectedParameters = {
                customer_id: "customerIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerPath', () => {
                const result = client.customerPath("customerIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerName', () => {
                const result = client.matchCustomerIdFromCustomerName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerAsset', () => {
            const fakePath = "/rendered/path/customerAsset";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_id: "assetIdValue",
                field_type: "fieldTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerAssetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerAssetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerAssetPath', () => {
                const result = client.customerAssetPath("customerIdValue", "assetIdValue", "fieldTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerAssetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerAssetName', () => {
                const result = client.matchCustomerIdFromCustomerAssetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetIdFromCustomerAssetName', () => {
                const result = client.matchAssetIdFromCustomerAssetName(fakePath);
                assert.strictEqual(result, "assetIdValue");
                assert((client.pathTemplates.customerAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFieldTypeFromCustomerAssetName', () => {
                const result = client.matchFieldTypeFromCustomerAssetName(fakePath);
                assert.strictEqual(result, "fieldTypeValue");
                assert((client.pathTemplates.customerAssetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerAssetSet', () => {
            const fakePath = "/rendered/path/customerAssetSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                asset_set_id: "assetSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerAssetSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerAssetSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerAssetSetPath', () => {
                const result = client.customerAssetSetPath("customerIdValue", "assetSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerAssetSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerAssetSetName', () => {
                const result = client.matchCustomerIdFromCustomerAssetSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAssetSetIdFromCustomerAssetSetName', () => {
                const result = client.matchAssetSetIdFromCustomerAssetSetName(fakePath);
                assert.strictEqual(result, "assetSetIdValue");
                assert((client.pathTemplates.customerAssetSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerClient', () => {
            const fakePath = "/rendered/path/customerClient";
            const expectedParameters = {
                customer_id: "customerIdValue",
                client_customer_id: "clientCustomerIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerClientPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerClientPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerClientPath', () => {
                const result = client.customerClientPath("customerIdValue", "clientCustomerIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerClientPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerClientName', () => {
                const result = client.matchCustomerIdFromCustomerClientName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerClientPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClientCustomerIdFromCustomerClientName', () => {
                const result = client.matchClientCustomerIdFromCustomerClientName(fakePath);
                assert.strictEqual(result, "clientCustomerIdValue");
                assert((client.pathTemplates.customerClientPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerClientLink', () => {
            const fakePath = "/rendered/path/customerClientLink";
            const expectedParameters = {
                customer_id: "customerIdValue",
                client_customer_id: "clientCustomerIdValue",
                manager_link_id: "managerLinkIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerClientLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerClientLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerClientLinkPath', () => {
                const result = client.customerClientLinkPath("customerIdValue", "clientCustomerIdValue", "managerLinkIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerClientLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerClientLinkName', () => {
                const result = client.matchCustomerIdFromCustomerClientLinkName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerClientLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClientCustomerIdFromCustomerClientLinkName', () => {
                const result = client.matchClientCustomerIdFromCustomerClientLinkName(fakePath);
                assert.strictEqual(result, "clientCustomerIdValue");
                assert((client.pathTemplates.customerClientLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchManagerLinkIdFromCustomerClientLinkName', () => {
                const result = client.matchManagerLinkIdFromCustomerClientLinkName(fakePath);
                assert.strictEqual(result, "managerLinkIdValue");
                assert((client.pathTemplates.customerClientLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerConversionGoal', () => {
            const fakePath = "/rendered/path/customerConversionGoal";
            const expectedParameters = {
                customer_id: "customerIdValue",
                category: "categoryValue",
                source: "sourceValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerConversionGoalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerConversionGoalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerConversionGoalPath', () => {
                const result = client.customerConversionGoalPath("customerIdValue", "categoryValue", "sourceValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerConversionGoalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerConversionGoalName', () => {
                const result = client.matchCustomerIdFromCustomerConversionGoalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCategoryFromCustomerConversionGoalName', () => {
                const result = client.matchCategoryFromCustomerConversionGoalName(fakePath);
                assert.strictEqual(result, "categoryValue");
                assert((client.pathTemplates.customerConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSourceFromCustomerConversionGoalName', () => {
                const result = client.matchSourceFromCustomerConversionGoalName(fakePath);
                assert.strictEqual(result, "sourceValue");
                assert((client.pathTemplates.customerConversionGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerCustomizer', () => {
            const fakePath = "/rendered/path/customerCustomizer";
            const expectedParameters = {
                customer_id: "customerIdValue",
                customizer_attribute_id: "customizerAttributeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerCustomizerPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerCustomizerPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerCustomizerPath', () => {
                const result = client.customerCustomizerPath("customerIdValue", "customizerAttributeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerCustomizerPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerCustomizerName', () => {
                const result = client.matchCustomerIdFromCustomerCustomizerName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomizerAttributeIdFromCustomerCustomizerName', () => {
                const result = client.matchCustomizerAttributeIdFromCustomerCustomizerName(fakePath);
                assert.strictEqual(result, "customizerAttributeIdValue");
                assert((client.pathTemplates.customerCustomizerPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerExtensionSetting', () => {
            const fakePath = "/rendered/path/customerExtensionSetting";
            const expectedParameters = {
                customer_id: "customerIdValue",
                extension_type: "extensionTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerExtensionSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerExtensionSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerExtensionSettingPath', () => {
                const result = client.customerExtensionSettingPath("customerIdValue", "extensionTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerExtensionSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerExtensionSettingName', () => {
                const result = client.matchCustomerIdFromCustomerExtensionSettingName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExtensionTypeFromCustomerExtensionSettingName', () => {
                const result = client.matchExtensionTypeFromCustomerExtensionSettingName(fakePath);
                assert.strictEqual(result, "extensionTypeValue");
                assert((client.pathTemplates.customerExtensionSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerFeed', () => {
            const fakePath = "/rendered/path/customerFeed";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerFeedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerFeedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerFeedPath', () => {
                const result = client.customerFeedPath("customerIdValue", "feedIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerFeedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerFeedName', () => {
                const result = client.matchCustomerIdFromCustomerFeedName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromCustomerFeedName', () => {
                const result = client.matchFeedIdFromCustomerFeedName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.customerFeedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerLabel', () => {
            const fakePath = "/rendered/path/customerLabel";
            const expectedParameters = {
                customer_id: "customerIdValue",
                label_id: "labelIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerLabelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerLabelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerLabelPath', () => {
                const result = client.customerLabelPath("customerIdValue", "labelIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerLabelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerLabelName', () => {
                const result = client.matchCustomerIdFromCustomerLabelName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelIdFromCustomerLabelName', () => {
                const result = client.matchLabelIdFromCustomerLabelName(fakePath);
                assert.strictEqual(result, "labelIdValue");
                assert((client.pathTemplates.customerLabelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerLifecycleGoal', () => {
            const fakePath = "/rendered/path/customerLifecycleGoal";
            const expectedParameters = {
                customer_id: "customerIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerLifecycleGoalPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerLifecycleGoalPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerLifecycleGoalPath', () => {
                const result = client.customerLifecycleGoalPath("customerIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerLifecycleGoalPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerLifecycleGoalName', () => {
                const result = client.matchCustomerIdFromCustomerLifecycleGoalName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerLifecycleGoalPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerManagerLink', () => {
            const fakePath = "/rendered/path/customerManagerLink";
            const expectedParameters = {
                customer_id: "customerIdValue",
                manager_customer_id: "managerCustomerIdValue",
                manager_link_id: "managerLinkIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerManagerLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerManagerLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerManagerLinkPath', () => {
                const result = client.customerManagerLinkPath("customerIdValue", "managerCustomerIdValue", "managerLinkIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerManagerLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerManagerLinkName', () => {
                const result = client.matchCustomerIdFromCustomerManagerLinkName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerManagerLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchManagerCustomerIdFromCustomerManagerLinkName', () => {
                const result = client.matchManagerCustomerIdFromCustomerManagerLinkName(fakePath);
                assert.strictEqual(result, "managerCustomerIdValue");
                assert((client.pathTemplates.customerManagerLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchManagerLinkIdFromCustomerManagerLinkName', () => {
                const result = client.matchManagerLinkIdFromCustomerManagerLinkName(fakePath);
                assert.strictEqual(result, "managerLinkIdValue");
                assert((client.pathTemplates.customerManagerLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerNegativeCriterion', () => {
            const fakePath = "/rendered/path/customerNegativeCriterion";
            const expectedParameters = {
                customer_id: "customerIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerNegativeCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerNegativeCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerNegativeCriterionPath', () => {
                const result = client.customerNegativeCriterionPath("customerIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerNegativeCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerNegativeCriterionName', () => {
                const result = client.matchCustomerIdFromCustomerNegativeCriterionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerNegativeCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromCustomerNegativeCriterionName', () => {
                const result = client.matchCriterionIdFromCustomerNegativeCriterionName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.customerNegativeCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerSearchTermInsight', () => {
            const fakePath = "/rendered/path/customerSearchTermInsight";
            const expectedParameters = {
                customer_id: "customerIdValue",
                cluster_id: "clusterIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerSearchTermInsightPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerSearchTermInsightPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerSearchTermInsightPath', () => {
                const result = client.customerSearchTermInsightPath("customerIdValue", "clusterIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerSearchTermInsightPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerSearchTermInsightName', () => {
                const result = client.matchCustomerIdFromCustomerSearchTermInsightName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerSearchTermInsightPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClusterIdFromCustomerSearchTermInsightName', () => {
                const result = client.matchClusterIdFromCustomerSearchTermInsightName(fakePath);
                assert.strictEqual(result, "clusterIdValue");
                assert((client.pathTemplates.customerSearchTermInsightPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerSkAdNetworkConversionValueSchema', () => {
            const fakePath = "/rendered/path/customerSkAdNetworkConversionValueSchema";
            const expectedParameters = {
                customer_id: "customerIdValue",
                account_link_id: "accountLinkIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerSkAdNetworkConversionValueSchemaPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerSkAdNetworkConversionValueSchemaPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerSkAdNetworkConversionValueSchemaPath', () => {
                const result = client.customerSkAdNetworkConversionValueSchemaPath("customerIdValue", "accountLinkIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerSkAdNetworkConversionValueSchemaPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerSkAdNetworkConversionValueSchemaName', () => {
                const result = client.matchCustomerIdFromCustomerSkAdNetworkConversionValueSchemaName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerSkAdNetworkConversionValueSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAccountLinkIdFromCustomerSkAdNetworkConversionValueSchemaName', () => {
                const result = client.matchAccountLinkIdFromCustomerSkAdNetworkConversionValueSchemaName(fakePath);
                assert.strictEqual(result, "accountLinkIdValue");
                assert((client.pathTemplates.customerSkAdNetworkConversionValueSchemaPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerUserAccess', () => {
            const fakePath = "/rendered/path/customerUserAccess";
            const expectedParameters = {
                customer_id: "customerIdValue",
                user_id: "userIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerUserAccessPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerUserAccessPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerUserAccessPath', () => {
                const result = client.customerUserAccessPath("customerIdValue", "userIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerUserAccessPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerUserAccessName', () => {
                const result = client.matchCustomerIdFromCustomerUserAccessName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerUserAccessPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserIdFromCustomerUserAccessName', () => {
                const result = client.matchUserIdFromCustomerUserAccessName(fakePath);
                assert.strictEqual(result, "userIdValue");
                assert((client.pathTemplates.customerUserAccessPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customerUserAccessInvitation', () => {
            const fakePath = "/rendered/path/customerUserAccessInvitation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                invitation_id: "invitationIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customerUserAccessInvitationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customerUserAccessInvitationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customerUserAccessInvitationPath', () => {
                const result = client.customerUserAccessInvitationPath("customerIdValue", "invitationIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customerUserAccessInvitationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomerUserAccessInvitationName', () => {
                const result = client.matchCustomerIdFromCustomerUserAccessInvitationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customerUserAccessInvitationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInvitationIdFromCustomerUserAccessInvitationName', () => {
                const result = client.matchInvitationIdFromCustomerUserAccessInvitationName(fakePath);
                assert.strictEqual(result, "invitationIdValue");
                assert((client.pathTemplates.customerUserAccessInvitationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('customizerAttribute', () => {
            const fakePath = "/rendered/path/customizerAttribute";
            const expectedParameters = {
                customer_id: "customerIdValue",
                customizer_attribute_id: "customizerAttributeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.customizerAttributePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.customizerAttributePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('customizerAttributePath', () => {
                const result = client.customizerAttributePath("customerIdValue", "customizerAttributeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.customizerAttributePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromCustomizerAttributeName', () => {
                const result = client.matchCustomerIdFromCustomizerAttributeName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.customizerAttributePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomizerAttributeIdFromCustomizerAttributeName', () => {
                const result = client.matchCustomizerAttributeIdFromCustomizerAttributeName(fakePath);
                assert.strictEqual(result, "customizerAttributeIdValue");
                assert((client.pathTemplates.customizerAttributePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('detailPlacementView', () => {
            const fakePath = "/rendered/path/detailPlacementView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.detailPlacementViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.detailPlacementViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('detailPlacementViewPath', () => {
                const result = client.detailPlacementViewPath("customerIdValue", "adGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.detailPlacementViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromDetailPlacementViewName', () => {
                const result = client.matchCustomerIdFromDetailPlacementViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.detailPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromDetailPlacementViewName', () => {
                const result = client.matchAdGroupIdFromDetailPlacementViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.detailPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('detailedDemographic', () => {
            const fakePath = "/rendered/path/detailedDemographic";
            const expectedParameters = {
                customer_id: "customerIdValue",
                detailed_demographic_id: "detailedDemographicIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.detailedDemographicPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.detailedDemographicPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('detailedDemographicPath', () => {
                const result = client.detailedDemographicPath("customerIdValue", "detailedDemographicIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.detailedDemographicPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromDetailedDemographicName', () => {
                const result = client.matchCustomerIdFromDetailedDemographicName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.detailedDemographicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDetailedDemographicIdFromDetailedDemographicName', () => {
                const result = client.matchDetailedDemographicIdFromDetailedDemographicName(fakePath);
                assert.strictEqual(result, "detailedDemographicIdValue");
                assert((client.pathTemplates.detailedDemographicPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('displayKeywordView', () => {
            const fakePath = "/rendered/path/displayKeywordView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.displayKeywordViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.displayKeywordViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('displayKeywordViewPath', () => {
                const result = client.displayKeywordViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.displayKeywordViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromDisplayKeywordViewName', () => {
                const result = client.matchCustomerIdFromDisplayKeywordViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.displayKeywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromDisplayKeywordViewName', () => {
                const result = client.matchAdGroupIdFromDisplayKeywordViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.displayKeywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromDisplayKeywordViewName', () => {
                const result = client.matchCriterionIdFromDisplayKeywordViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.displayKeywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('distanceView', () => {
            const fakePath = "/rendered/path/distanceView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                placeholder_chain_id: "placeholderChainIdValue",
                distance_bucket: "distanceBucketValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.distanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.distanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('distanceViewPath', () => {
                const result = client.distanceViewPath("customerIdValue", "placeholderChainIdValue", "distanceBucketValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.distanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromDistanceViewName', () => {
                const result = client.matchCustomerIdFromDistanceViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.distanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPlaceholderChainIdFromDistanceViewName', () => {
                const result = client.matchPlaceholderChainIdFromDistanceViewName(fakePath);
                assert.strictEqual(result, "placeholderChainIdValue");
                assert((client.pathTemplates.distanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchDistanceBucketFromDistanceViewName', () => {
                const result = client.matchDistanceBucketFromDistanceViewName(fakePath);
                assert.strictEqual(result, "distanceBucketValue");
                assert((client.pathTemplates.distanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('domainCategory', () => {
            const fakePath = "/rendered/path/domainCategory";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                language_code: "languageCodeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.domainCategoryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.domainCategoryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('domainCategoryPath', () => {
                const result = client.domainCategoryPath("customerIdValue", "campaignIdValue", "languageCodeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.domainCategoryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromDomainCategoryName', () => {
                const result = client.matchCustomerIdFromDomainCategoryName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.domainCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromDomainCategoryName', () => {
                const result = client.matchCampaignIdFromDomainCategoryName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.domainCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLanguageCodeFromDomainCategoryName', () => {
                const result = client.matchLanguageCodeFromDomainCategoryName(fakePath);
                assert.strictEqual(result, "languageCodeValue");
                assert((client.pathTemplates.domainCategoryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dynamicSearchAdsSearchTermView', () => {
            const fakePath = "/rendered/path/dynamicSearchAdsSearchTermView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                search_term_fingerprint: "searchTermFingerprintValue",
                headline_fingerprint: "headlineFingerprintValue",
                landing_page_fingerprint: "landingPageFingerprintValue",
                page_url_fingerprint: "pageUrlFingerprintValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dynamicSearchAdsSearchTermViewPath', () => {
                const result = client.dynamicSearchAdsSearchTermViewPath("customerIdValue", "adGroupIdValue", "searchTermFingerprintValue", "headlineFingerprintValue", "landingPageFingerprintValue", "pageUrlFingerprintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchCustomerIdFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchAdGroupIdFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSearchTermFingerprintFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchSearchTermFingerprintFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "searchTermFingerprintValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchHeadlineFingerprintFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchHeadlineFingerprintFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "headlineFingerprintValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLandingPageFingerprintFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchLandingPageFingerprintFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "landingPageFingerprintValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPageUrlFingerprintFromDynamicSearchAdsSearchTermViewName', () => {
                const result = client.matchPageUrlFingerprintFromDynamicSearchAdsSearchTermViewName(fakePath);
                assert.strictEqual(result, "pageUrlFingerprintValue");
                assert((client.pathTemplates.dynamicSearchAdsSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('expandedLandingPageView', () => {
            const fakePath = "/rendered/path/expandedLandingPageView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                expanded_final_url_fingerprint: "expandedFinalUrlFingerprintValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.expandedLandingPageViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.expandedLandingPageViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('expandedLandingPageViewPath', () => {
                const result = client.expandedLandingPageViewPath("customerIdValue", "expandedFinalUrlFingerprintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.expandedLandingPageViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromExpandedLandingPageViewName', () => {
                const result = client.matchCustomerIdFromExpandedLandingPageViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.expandedLandingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExpandedFinalUrlFingerprintFromExpandedLandingPageViewName', () => {
                const result = client.matchExpandedFinalUrlFingerprintFromExpandedLandingPageViewName(fakePath);
                assert.strictEqual(result, "expandedFinalUrlFingerprintValue");
                assert((client.pathTemplates.expandedLandingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('experiment', () => {
            const fakePath = "/rendered/path/experiment";
            const expectedParameters = {
                customer_id: "customerIdValue",
                trial_id: "trialIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.experimentPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.experimentPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('experimentPath', () => {
                const result = client.experimentPath("customerIdValue", "trialIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.experimentPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromExperimentName', () => {
                const result = client.matchCustomerIdFromExperimentName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.experimentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTrialIdFromExperimentName', () => {
                const result = client.matchTrialIdFromExperimentName(fakePath);
                assert.strictEqual(result, "trialIdValue");
                assert((client.pathTemplates.experimentPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('experimentArm', () => {
            const fakePath = "/rendered/path/experimentArm";
            const expectedParameters = {
                customer_id: "customerIdValue",
                trial_id: "trialIdValue",
                trial_arm_id: "trialArmIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.experimentArmPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.experimentArmPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('experimentArmPath', () => {
                const result = client.experimentArmPath("customerIdValue", "trialIdValue", "trialArmIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.experimentArmPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromExperimentArmName', () => {
                const result = client.matchCustomerIdFromExperimentArmName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.experimentArmPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTrialIdFromExperimentArmName', () => {
                const result = client.matchTrialIdFromExperimentArmName(fakePath);
                assert.strictEqual(result, "trialIdValue");
                assert((client.pathTemplates.experimentArmPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchTrialArmIdFromExperimentArmName', () => {
                const result = client.matchTrialArmIdFromExperimentArmName(fakePath);
                assert.strictEqual(result, "trialArmIdValue");
                assert((client.pathTemplates.experimentArmPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('extensionFeedItem', () => {
            const fakePath = "/rendered/path/extensionFeedItem";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_item_id: "feedItemIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.extensionFeedItemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.extensionFeedItemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('extensionFeedItemPath', () => {
                const result = client.extensionFeedItemPath("customerIdValue", "feedItemIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.extensionFeedItemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromExtensionFeedItemName', () => {
                const result = client.matchCustomerIdFromExtensionFeedItemName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.extensionFeedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemIdFromExtensionFeedItemName', () => {
                const result = client.matchFeedItemIdFromExtensionFeedItemName(fakePath);
                assert.strictEqual(result, "feedItemIdValue");
                assert((client.pathTemplates.extensionFeedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feed', () => {
            const fakePath = "/rendered/path/feed";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedPath', () => {
                const result = client.feedPath("customerIdValue", "feedIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedName', () => {
                const result = client.matchCustomerIdFromFeedName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromFeedName', () => {
                const result = client.matchFeedIdFromFeedName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.feedPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedItem', () => {
            const fakePath = "/rendered/path/feedItem";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
                feed_item_id: "feedItemIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedItemPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedItemPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedItemPath', () => {
                const result = client.feedItemPath("customerIdValue", "feedIdValue", "feedItemIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedItemPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedItemName', () => {
                const result = client.matchCustomerIdFromFeedItemName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromFeedItemName', () => {
                const result = client.matchFeedIdFromFeedItemName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.feedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemIdFromFeedItemName', () => {
                const result = client.matchFeedItemIdFromFeedItemName(fakePath);
                assert.strictEqual(result, "feedItemIdValue");
                assert((client.pathTemplates.feedItemPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedItemSet', () => {
            const fakePath = "/rendered/path/feedItemSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
                feed_item_set_id: "feedItemSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedItemSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedItemSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedItemSetPath', () => {
                const result = client.feedItemSetPath("customerIdValue", "feedIdValue", "feedItemSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedItemSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedItemSetName', () => {
                const result = client.matchCustomerIdFromFeedItemSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedItemSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromFeedItemSetName', () => {
                const result = client.matchFeedIdFromFeedItemSetName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.feedItemSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemSetIdFromFeedItemSetName', () => {
                const result = client.matchFeedItemSetIdFromFeedItemSetName(fakePath);
                assert.strictEqual(result, "feedItemSetIdValue");
                assert((client.pathTemplates.feedItemSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedItemSetLink', () => {
            const fakePath = "/rendered/path/feedItemSetLink";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
                feed_item_set_id: "feedItemSetIdValue",
                feed_item_id: "feedItemIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedItemSetLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedItemSetLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedItemSetLinkPath', () => {
                const result = client.feedItemSetLinkPath("customerIdValue", "feedIdValue", "feedItemSetIdValue", "feedItemIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedItemSetLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedItemSetLinkName', () => {
                const result = client.matchCustomerIdFromFeedItemSetLinkName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedItemSetLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromFeedItemSetLinkName', () => {
                const result = client.matchFeedIdFromFeedItemSetLinkName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.feedItemSetLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemSetIdFromFeedItemSetLinkName', () => {
                const result = client.matchFeedItemSetIdFromFeedItemSetLinkName(fakePath);
                assert.strictEqual(result, "feedItemSetIdValue");
                assert((client.pathTemplates.feedItemSetLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemIdFromFeedItemSetLinkName', () => {
                const result = client.matchFeedItemIdFromFeedItemSetLinkName(fakePath);
                assert.strictEqual(result, "feedItemIdValue");
                assert((client.pathTemplates.feedItemSetLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedItemTarget', () => {
            const fakePath = "/rendered/path/feedItemTarget";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
                feed_item_id: "feedItemIdValue",
                feed_item_target_type: "feedItemTargetTypeValue",
                feed_item_target_id: "feedItemTargetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedItemTargetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedItemTargetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedItemTargetPath', () => {
                const result = client.feedItemTargetPath("customerIdValue", "feedIdValue", "feedItemIdValue", "feedItemTargetTypeValue", "feedItemTargetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedItemTargetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedItemTargetName', () => {
                const result = client.matchCustomerIdFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromFeedItemTargetName', () => {
                const result = client.matchFeedIdFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemIdFromFeedItemTargetName', () => {
                const result = client.matchFeedItemIdFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "feedItemIdValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemTargetTypeFromFeedItemTargetName', () => {
                const result = client.matchFeedItemTargetTypeFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "feedItemTargetTypeValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedItemTargetIdFromFeedItemTargetName', () => {
                const result = client.matchFeedItemTargetIdFromFeedItemTargetName(fakePath);
                assert.strictEqual(result, "feedItemTargetIdValue");
                assert((client.pathTemplates.feedItemTargetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedMapping', () => {
            const fakePath = "/rendered/path/feedMapping";
            const expectedParameters = {
                customer_id: "customerIdValue",
                feed_id: "feedIdValue",
                feed_mapping_id: "feedMappingIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedMappingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedMappingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedMappingPath', () => {
                const result = client.feedMappingPath("customerIdValue", "feedIdValue", "feedMappingIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedMappingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedMappingName', () => {
                const result = client.matchCustomerIdFromFeedMappingName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedIdFromFeedMappingName', () => {
                const result = client.matchFeedIdFromFeedMappingName(fakePath);
                assert.strictEqual(result, "feedIdValue");
                assert((client.pathTemplates.feedMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedMappingIdFromFeedMappingName', () => {
                const result = client.matchFeedMappingIdFromFeedMappingName(fakePath);
                assert.strictEqual(result, "feedMappingIdValue");
                assert((client.pathTemplates.feedMappingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('feedPlaceholderView', () => {
            const fakePath = "/rendered/path/feedPlaceholderView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                placeholder_type: "placeholderTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.feedPlaceholderViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.feedPlaceholderViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('feedPlaceholderViewPath', () => {
                const result = client.feedPlaceholderViewPath("customerIdValue", "placeholderTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.feedPlaceholderViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromFeedPlaceholderViewName', () => {
                const result = client.matchCustomerIdFromFeedPlaceholderViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.feedPlaceholderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPlaceholderTypeFromFeedPlaceholderViewName', () => {
                const result = client.matchPlaceholderTypeFromFeedPlaceholderViewName(fakePath);
                assert.strictEqual(result, "placeholderTypeValue");
                assert((client.pathTemplates.feedPlaceholderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('genderView', () => {
            const fakePath = "/rendered/path/genderView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.genderViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.genderViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('genderViewPath', () => {
                const result = client.genderViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.genderViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromGenderViewName', () => {
                const result = client.matchCustomerIdFromGenderViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.genderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromGenderViewName', () => {
                const result = client.matchAdGroupIdFromGenderViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.genderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromGenderViewName', () => {
                const result = client.matchCriterionIdFromGenderViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.genderViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('geoTargetConstant', () => {
            const fakePath = "/rendered/path/geoTargetConstant";
            const expectedParameters = {
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.geoTargetConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.geoTargetConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('geoTargetConstantPath', () => {
                const result = client.geoTargetConstantPath("criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.geoTargetConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCriterionIdFromGeoTargetConstantName', () => {
                const result = client.matchCriterionIdFromGeoTargetConstantName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.geoTargetConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('geographicView', () => {
            const fakePath = "/rendered/path/geographicView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                country_criterion_id: "countryCriterionIdValue",
                location_type: "locationTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.geographicViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.geographicViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('geographicViewPath', () => {
                const result = client.geographicViewPath("customerIdValue", "countryCriterionIdValue", "locationTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.geographicViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromGeographicViewName', () => {
                const result = client.matchCustomerIdFromGeographicViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.geographicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCountryCriterionIdFromGeographicViewName', () => {
                const result = client.matchCountryCriterionIdFromGeographicViewName(fakePath);
                assert.strictEqual(result, "countryCriterionIdValue");
                assert((client.pathTemplates.geographicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocationTypeFromGeographicViewName', () => {
                const result = client.matchLocationTypeFromGeographicViewName(fakePath);
                assert.strictEqual(result, "locationTypeValue");
                assert((client.pathTemplates.geographicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('googleAdsField', () => {
            const fakePath = "/rendered/path/googleAdsField";
            const expectedParameters = {
                google_ads_field: "googleAdsFieldValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.googleAdsFieldPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.googleAdsFieldPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('googleAdsFieldPath', () => {
                const result = client.googleAdsFieldPath("googleAdsFieldValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.googleAdsFieldPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchGoogleAdsFieldFromGoogleAdsFieldName', () => {
                const result = client.matchGoogleAdsFieldFromGoogleAdsFieldName(fakePath);
                assert.strictEqual(result, "googleAdsFieldValue");
                assert((client.pathTemplates.googleAdsFieldPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('groupPlacementView', () => {
            const fakePath = "/rendered/path/groupPlacementView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.groupPlacementViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.groupPlacementViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('groupPlacementViewPath', () => {
                const result = client.groupPlacementViewPath("customerIdValue", "adGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.groupPlacementViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromGroupPlacementViewName', () => {
                const result = client.matchCustomerIdFromGroupPlacementViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.groupPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromGroupPlacementViewName', () => {
                const result = client.matchAdGroupIdFromGroupPlacementViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.groupPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hotelGroupView', () => {
            const fakePath = "/rendered/path/hotelGroupView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.hotelGroupViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hotelGroupViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hotelGroupViewPath', () => {
                const result = client.hotelGroupViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hotelGroupViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromHotelGroupViewName', () => {
                const result = client.matchCustomerIdFromHotelGroupViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.hotelGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromHotelGroupViewName', () => {
                const result = client.matchAdGroupIdFromHotelGroupViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.hotelGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromHotelGroupViewName', () => {
                const result = client.matchCriterionIdFromHotelGroupViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.hotelGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hotelPerformanceView', () => {
            const fakePath = "/rendered/path/hotelPerformanceView";
            const expectedParameters = {
                customer_id: "customerIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.hotelPerformanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hotelPerformanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hotelPerformanceViewPath', () => {
                const result = client.hotelPerformanceViewPath("customerIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hotelPerformanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromHotelPerformanceViewName', () => {
                const result = client.matchCustomerIdFromHotelPerformanceViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.hotelPerformanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('hotelReconciliation', () => {
            const fakePath = "/rendered/path/hotelReconciliation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                commission_id: "commissionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.hotelReconciliationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.hotelReconciliationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('hotelReconciliationPath', () => {
                const result = client.hotelReconciliationPath("customerIdValue", "commissionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.hotelReconciliationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromHotelReconciliationName', () => {
                const result = client.matchCustomerIdFromHotelReconciliationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.hotelReconciliationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCommissionIdFromHotelReconciliationName', () => {
                const result = client.matchCommissionIdFromHotelReconciliationName(fakePath);
                assert.strictEqual(result, "commissionIdValue");
                assert((client.pathTemplates.hotelReconciliationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('incomeRangeView', () => {
            const fakePath = "/rendered/path/incomeRangeView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.incomeRangeViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.incomeRangeViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('incomeRangeViewPath', () => {
                const result = client.incomeRangeViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.incomeRangeViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromIncomeRangeViewName', () => {
                const result = client.matchCustomerIdFromIncomeRangeViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.incomeRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromIncomeRangeViewName', () => {
                const result = client.matchAdGroupIdFromIncomeRangeViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.incomeRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromIncomeRangeViewName', () => {
                const result = client.matchCriterionIdFromIncomeRangeViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.incomeRangeViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('invoice', () => {
            const fakePath = "/rendered/path/invoice";
            const expectedParameters = {
                customer_id: "customerIdValue",
                invoice_id: "invoiceIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.invoicePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.invoicePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('invoicePath', () => {
                const result = client.invoicePath("customerIdValue", "invoiceIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.invoicePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromInvoiceName', () => {
                const result = client.matchCustomerIdFromInvoiceName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.invoicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchInvoiceIdFromInvoiceName', () => {
                const result = client.matchInvoiceIdFromInvoiceName(fakePath);
                assert.strictEqual(result, "invoiceIdValue");
                assert((client.pathTemplates.invoicePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlan', () => {
            const fakePath = "/rendered/path/keywordPlan";
            const expectedParameters = {
                customer_id: "customerIdValue",
                keyword_plan_id: "keywordPlanIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanPath', () => {
                const result = client.keywordPlanPath("customerIdValue", "keywordPlanIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromKeywordPlanName', () => {
                const result = client.matchCustomerIdFromKeywordPlanName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.keywordPlanPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanIdFromKeywordPlanName', () => {
                const result = client.matchKeywordPlanIdFromKeywordPlanName(fakePath);
                assert.strictEqual(result, "keywordPlanIdValue");
                assert((client.pathTemplates.keywordPlanPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanAdGroup', () => {
            const fakePath = "/rendered/path/keywordPlanAdGroup";
            const expectedParameters = {
                customer_id: "customerIdValue",
                keyword_plan_ad_group_id: "keywordPlanAdGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanAdGroupPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanAdGroupPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanAdGroupPath', () => {
                const result = client.keywordPlanAdGroupPath("customerIdValue", "keywordPlanAdGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanAdGroupPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromKeywordPlanAdGroupName', () => {
                const result = client.matchCustomerIdFromKeywordPlanAdGroupName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.keywordPlanAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanAdGroupIdFromKeywordPlanAdGroupName', () => {
                const result = client.matchKeywordPlanAdGroupIdFromKeywordPlanAdGroupName(fakePath);
                assert.strictEqual(result, "keywordPlanAdGroupIdValue");
                assert((client.pathTemplates.keywordPlanAdGroupPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanAdGroupKeyword', () => {
            const fakePath = "/rendered/path/keywordPlanAdGroupKeyword";
            const expectedParameters = {
                customer_id: "customerIdValue",
                keyword_plan_ad_group_keyword_id: "keywordPlanAdGroupKeywordIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanAdGroupKeywordPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanAdGroupKeywordPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanAdGroupKeywordPath', () => {
                const result = client.keywordPlanAdGroupKeywordPath("customerIdValue", "keywordPlanAdGroupKeywordIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanAdGroupKeywordPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromKeywordPlanAdGroupKeywordName', () => {
                const result = client.matchCustomerIdFromKeywordPlanAdGroupKeywordName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.keywordPlanAdGroupKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanAdGroupKeywordIdFromKeywordPlanAdGroupKeywordName', () => {
                const result = client.matchKeywordPlanAdGroupKeywordIdFromKeywordPlanAdGroupKeywordName(fakePath);
                assert.strictEqual(result, "keywordPlanAdGroupKeywordIdValue");
                assert((client.pathTemplates.keywordPlanAdGroupKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanCampaign', () => {
            const fakePath = "/rendered/path/keywordPlanCampaign";
            const expectedParameters = {
                customer_id: "customerIdValue",
                keyword_plan_campaign_id: "keywordPlanCampaignIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanCampaignPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanCampaignPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanCampaignPath', () => {
                const result = client.keywordPlanCampaignPath("customerIdValue", "keywordPlanCampaignIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanCampaignPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromKeywordPlanCampaignName', () => {
                const result = client.matchCustomerIdFromKeywordPlanCampaignName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.keywordPlanCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanCampaignIdFromKeywordPlanCampaignName', () => {
                const result = client.matchKeywordPlanCampaignIdFromKeywordPlanCampaignName(fakePath);
                assert.strictEqual(result, "keywordPlanCampaignIdValue");
                assert((client.pathTemplates.keywordPlanCampaignPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordPlanCampaignKeyword', () => {
            const fakePath = "/rendered/path/keywordPlanCampaignKeyword";
            const expectedParameters = {
                customer_id: "customerIdValue",
                keyword_plan_campaign_keyword_id: "keywordPlanCampaignKeywordIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordPlanCampaignKeywordPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordPlanCampaignKeywordPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordPlanCampaignKeywordPath', () => {
                const result = client.keywordPlanCampaignKeywordPath("customerIdValue", "keywordPlanCampaignKeywordIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordPlanCampaignKeywordPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromKeywordPlanCampaignKeywordName', () => {
                const result = client.matchCustomerIdFromKeywordPlanCampaignKeywordName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.keywordPlanCampaignKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchKeywordPlanCampaignKeywordIdFromKeywordPlanCampaignKeywordName', () => {
                const result = client.matchKeywordPlanCampaignKeywordIdFromKeywordPlanCampaignKeywordName(fakePath);
                assert.strictEqual(result, "keywordPlanCampaignKeywordIdValue");
                assert((client.pathTemplates.keywordPlanCampaignKeywordPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordThemeConstant', () => {
            const fakePath = "/rendered/path/keywordThemeConstant";
            const expectedParameters = {
                express_category_id: "expressCategoryIdValue",
                express_sub_category_id: "expressSubCategoryIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordThemeConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordThemeConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordThemeConstantPath', () => {
                const result = client.keywordThemeConstantPath("expressCategoryIdValue", "expressSubCategoryIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordThemeConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchExpressCategoryIdFromKeywordThemeConstantName', () => {
                const result = client.matchExpressCategoryIdFromKeywordThemeConstantName(fakePath);
                assert.strictEqual(result, "expressCategoryIdValue");
                assert((client.pathTemplates.keywordThemeConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchExpressSubCategoryIdFromKeywordThemeConstantName', () => {
                const result = client.matchExpressSubCategoryIdFromKeywordThemeConstantName(fakePath);
                assert.strictEqual(result, "expressSubCategoryIdValue");
                assert((client.pathTemplates.keywordThemeConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('keywordView', () => {
            const fakePath = "/rendered/path/keywordView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.keywordViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.keywordViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('keywordViewPath', () => {
                const result = client.keywordViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.keywordViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromKeywordViewName', () => {
                const result = client.matchCustomerIdFromKeywordViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.keywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromKeywordViewName', () => {
                const result = client.matchAdGroupIdFromKeywordViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.keywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromKeywordViewName', () => {
                const result = client.matchCriterionIdFromKeywordViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.keywordViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('label', () => {
            const fakePath = "/rendered/path/label";
            const expectedParameters = {
                customer_id: "customerIdValue",
                label_id: "labelIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.labelPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.labelPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('labelPath', () => {
                const result = client.labelPath("customerIdValue", "labelIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.labelPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLabelName', () => {
                const result = client.matchCustomerIdFromLabelName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.labelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLabelIdFromLabelName', () => {
                const result = client.matchLabelIdFromLabelName(fakePath);
                assert.strictEqual(result, "labelIdValue");
                assert((client.pathTemplates.labelPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('landingPageView', () => {
            const fakePath = "/rendered/path/landingPageView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                unexpanded_final_url_fingerprint: "unexpandedFinalUrlFingerprintValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.landingPageViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.landingPageViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('landingPageViewPath', () => {
                const result = client.landingPageViewPath("customerIdValue", "unexpandedFinalUrlFingerprintValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.landingPageViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLandingPageViewName', () => {
                const result = client.matchCustomerIdFromLandingPageViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.landingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUnexpandedFinalUrlFingerprintFromLandingPageViewName', () => {
                const result = client.matchUnexpandedFinalUrlFingerprintFromLandingPageViewName(fakePath);
                assert.strictEqual(result, "unexpandedFinalUrlFingerprintValue");
                assert((client.pathTemplates.landingPageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('languageConstant', () => {
            const fakePath = "/rendered/path/languageConstant";
            const expectedParameters = {
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.languageConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.languageConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('languageConstantPath', () => {
                const result = client.languageConstantPath("criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.languageConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCriterionIdFromLanguageConstantName', () => {
                const result = client.matchCriterionIdFromLanguageConstantName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.languageConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('leadFormSubmissionData', () => {
            const fakePath = "/rendered/path/leadFormSubmissionData";
            const expectedParameters = {
                customer_id: "customerIdValue",
                lead_form_user_submission_id: "leadFormUserSubmissionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.leadFormSubmissionDataPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.leadFormSubmissionDataPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('leadFormSubmissionDataPath', () => {
                const result = client.leadFormSubmissionDataPath("customerIdValue", "leadFormUserSubmissionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.leadFormSubmissionDataPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLeadFormSubmissionDataName', () => {
                const result = client.matchCustomerIdFromLeadFormSubmissionDataName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.leadFormSubmissionDataPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLeadFormUserSubmissionIdFromLeadFormSubmissionDataName', () => {
                const result = client.matchLeadFormUserSubmissionIdFromLeadFormSubmissionDataName(fakePath);
                assert.strictEqual(result, "leadFormUserSubmissionIdValue");
                assert((client.pathTemplates.leadFormSubmissionDataPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('lifeEvent', () => {
            const fakePath = "/rendered/path/lifeEvent";
            const expectedParameters = {
                customer_id: "customerIdValue",
                life_event_id: "lifeEventIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.lifeEventPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.lifeEventPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('lifeEventPath', () => {
                const result = client.lifeEventPath("customerIdValue", "lifeEventIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.lifeEventPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLifeEventName', () => {
                const result = client.matchCustomerIdFromLifeEventName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.lifeEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLifeEventIdFromLifeEventName', () => {
                const result = client.matchLifeEventIdFromLifeEventName(fakePath);
                assert.strictEqual(result, "lifeEventIdValue");
                assert((client.pathTemplates.lifeEventPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('localServicesEmployee', () => {
            const fakePath = "/rendered/path/localServicesEmployee";
            const expectedParameters = {
                customer_id: "customerIdValue",
                gls_employee_id: "glsEmployeeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.localServicesEmployeePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.localServicesEmployeePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('localServicesEmployeePath', () => {
                const result = client.localServicesEmployeePath("customerIdValue", "glsEmployeeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.localServicesEmployeePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLocalServicesEmployeeName', () => {
                const result = client.matchCustomerIdFromLocalServicesEmployeeName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.localServicesEmployeePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGlsEmployeeIdFromLocalServicesEmployeeName', () => {
                const result = client.matchGlsEmployeeIdFromLocalServicesEmployeeName(fakePath);
                assert.strictEqual(result, "glsEmployeeIdValue");
                assert((client.pathTemplates.localServicesEmployeePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('localServicesLead', () => {
            const fakePath = "/rendered/path/localServicesLead";
            const expectedParameters = {
                customer_id: "customerIdValue",
                local_services_lead_id: "localServicesLeadIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.localServicesLeadPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.localServicesLeadPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('localServicesLeadPath', () => {
                const result = client.localServicesLeadPath("customerIdValue", "localServicesLeadIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.localServicesLeadPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLocalServicesLeadName', () => {
                const result = client.matchCustomerIdFromLocalServicesLeadName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.localServicesLeadPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocalServicesLeadIdFromLocalServicesLeadName', () => {
                const result = client.matchLocalServicesLeadIdFromLocalServicesLeadName(fakePath);
                assert.strictEqual(result, "localServicesLeadIdValue");
                assert((client.pathTemplates.localServicesLeadPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('localServicesLeadConversation', () => {
            const fakePath = "/rendered/path/localServicesLeadConversation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                local_services_lead_conversation_id: "localServicesLeadConversationIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.localServicesLeadConversationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.localServicesLeadConversationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('localServicesLeadConversationPath', () => {
                const result = client.localServicesLeadConversationPath("customerIdValue", "localServicesLeadConversationIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.localServicesLeadConversationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLocalServicesLeadConversationName', () => {
                const result = client.matchCustomerIdFromLocalServicesLeadConversationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.localServicesLeadConversationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLocalServicesLeadConversationIdFromLocalServicesLeadConversationName', () => {
                const result = client.matchLocalServicesLeadConversationIdFromLocalServicesLeadConversationName(fakePath);
                assert.strictEqual(result, "localServicesLeadConversationIdValue");
                assert((client.pathTemplates.localServicesLeadConversationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('localServicesVerificationArtifact', () => {
            const fakePath = "/rendered/path/localServicesVerificationArtifact";
            const expectedParameters = {
                customer_id: "customerIdValue",
                gls_verification_artifact_id: "glsVerificationArtifactIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.localServicesVerificationArtifactPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.localServicesVerificationArtifactPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('localServicesVerificationArtifactPath', () => {
                const result = client.localServicesVerificationArtifactPath("customerIdValue", "glsVerificationArtifactIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.localServicesVerificationArtifactPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLocalServicesVerificationArtifactName', () => {
                const result = client.matchCustomerIdFromLocalServicesVerificationArtifactName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.localServicesVerificationArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGlsVerificationArtifactIdFromLocalServicesVerificationArtifactName', () => {
                const result = client.matchGlsVerificationArtifactIdFromLocalServicesVerificationArtifactName(fakePath);
                assert.strictEqual(result, "glsVerificationArtifactIdValue");
                assert((client.pathTemplates.localServicesVerificationArtifactPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('locationView', () => {
            const fakePath = "/rendered/path/locationView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.locationViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.locationViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('locationViewPath', () => {
                const result = client.locationViewPath("customerIdValue", "campaignIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.locationViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromLocationViewName', () => {
                const result = client.matchCustomerIdFromLocationViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.locationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromLocationViewName', () => {
                const result = client.matchCampaignIdFromLocationViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.locationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromLocationViewName', () => {
                const result = client.matchCriterionIdFromLocationViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.locationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('managedPlacementView', () => {
            const fakePath = "/rendered/path/managedPlacementView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.managedPlacementViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.managedPlacementViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('managedPlacementViewPath', () => {
                const result = client.managedPlacementViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.managedPlacementViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromManagedPlacementViewName', () => {
                const result = client.matchCustomerIdFromManagedPlacementViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.managedPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromManagedPlacementViewName', () => {
                const result = client.matchAdGroupIdFromManagedPlacementViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.managedPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromManagedPlacementViewName', () => {
                const result = client.matchCriterionIdFromManagedPlacementViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.managedPlacementViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mediaFile', () => {
            const fakePath = "/rendered/path/mediaFile";
            const expectedParameters = {
                customer_id: "customerIdValue",
                media_file_id: "mediaFileIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mediaFilePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mediaFilePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mediaFilePath', () => {
                const result = client.mediaFilePath("customerIdValue", "mediaFileIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mediaFilePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromMediaFileName', () => {
                const result = client.matchCustomerIdFromMediaFileName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.mediaFilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMediaFileIdFromMediaFileName', () => {
                const result = client.matchMediaFileIdFromMediaFileName(fakePath);
                assert.strictEqual(result, "mediaFileIdValue");
                assert((client.pathTemplates.mediaFilePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileAppCategoryConstant', () => {
            const fakePath = "/rendered/path/mobileAppCategoryConstant";
            const expectedParameters = {
                mobile_app_category_id: "mobileAppCategoryIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mobileAppCategoryConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileAppCategoryConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileAppCategoryConstantPath', () => {
                const result = client.mobileAppCategoryConstantPath("mobileAppCategoryIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileAppCategoryConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchMobileAppCategoryIdFromMobileAppCategoryConstantName', () => {
                const result = client.matchMobileAppCategoryIdFromMobileAppCategoryConstantName(fakePath);
                assert.strictEqual(result, "mobileAppCategoryIdValue");
                assert((client.pathTemplates.mobileAppCategoryConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('mobileDeviceConstant', () => {
            const fakePath = "/rendered/path/mobileDeviceConstant";
            const expectedParameters = {
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.mobileDeviceConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.mobileDeviceConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('mobileDeviceConstantPath', () => {
                const result = client.mobileDeviceConstantPath("criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.mobileDeviceConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCriterionIdFromMobileDeviceConstantName', () => {
                const result = client.matchCriterionIdFromMobileDeviceConstantName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.mobileDeviceConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('offlineConversionUploadClientSummary', () => {
            const fakePath = "/rendered/path/offlineConversionUploadClientSummary";
            const expectedParameters = {
                customer_id: "customerIdValue",
                client: "clientValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.offlineConversionUploadClientSummaryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.offlineConversionUploadClientSummaryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('offlineConversionUploadClientSummaryPath', () => {
                const result = client.offlineConversionUploadClientSummaryPath("customerIdValue", "clientValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.offlineConversionUploadClientSummaryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromOfflineConversionUploadClientSummaryName', () => {
                const result = client.matchCustomerIdFromOfflineConversionUploadClientSummaryName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.offlineConversionUploadClientSummaryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchClientFromOfflineConversionUploadClientSummaryName', () => {
                const result = client.matchClientFromOfflineConversionUploadClientSummaryName(fakePath);
                assert.strictEqual(result, "clientValue");
                assert((client.pathTemplates.offlineConversionUploadClientSummaryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('offlineUserDataJob', () => {
            const fakePath = "/rendered/path/offlineUserDataJob";
            const expectedParameters = {
                customer_id: "customerIdValue",
                offline_user_data_update_id: "offlineUserDataUpdateIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.offlineUserDataJobPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.offlineUserDataJobPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('offlineUserDataJobPath', () => {
                const result = client.offlineUserDataJobPath("customerIdValue", "offlineUserDataUpdateIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.offlineUserDataJobPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromOfflineUserDataJobName', () => {
                const result = client.matchCustomerIdFromOfflineUserDataJobName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.offlineUserDataJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchOfflineUserDataUpdateIdFromOfflineUserDataJobName', () => {
                const result = client.matchOfflineUserDataUpdateIdFromOfflineUserDataJobName(fakePath);
                assert.strictEqual(result, "offlineUserDataUpdateIdValue");
                assert((client.pathTemplates.offlineUserDataJobPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('operatingSystemVersionConstant', () => {
            const fakePath = "/rendered/path/operatingSystemVersionConstant";
            const expectedParameters = {
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.operatingSystemVersionConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.operatingSystemVersionConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('operatingSystemVersionConstantPath', () => {
                const result = client.operatingSystemVersionConstantPath("criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.operatingSystemVersionConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCriterionIdFromOperatingSystemVersionConstantName', () => {
                const result = client.matchCriterionIdFromOperatingSystemVersionConstantName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.operatingSystemVersionConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('paidOrganicSearchTermView', () => {
            const fakePath = "/rendered/path/paidOrganicSearchTermView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                ad_group_id: "adGroupIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.paidOrganicSearchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('paidOrganicSearchTermViewPath', () => {
                const result = client.paidOrganicSearchTermViewPath("customerIdValue", "campaignIdValue", "adGroupIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromPaidOrganicSearchTermViewName', () => {
                const result = client.matchCustomerIdFromPaidOrganicSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromPaidOrganicSearchTermViewName', () => {
                const result = client.matchCampaignIdFromPaidOrganicSearchTermViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromPaidOrganicSearchTermViewName', () => {
                const result = client.matchAdGroupIdFromPaidOrganicSearchTermViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.paidOrganicSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('parentalStatusView', () => {
            const fakePath = "/rendered/path/parentalStatusView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.parentalStatusViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.parentalStatusViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('parentalStatusViewPath', () => {
                const result = client.parentalStatusViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.parentalStatusViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromParentalStatusViewName', () => {
                const result = client.matchCustomerIdFromParentalStatusViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.parentalStatusViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromParentalStatusViewName', () => {
                const result = client.matchAdGroupIdFromParentalStatusViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.parentalStatusViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromParentalStatusViewName', () => {
                const result = client.matchCriterionIdFromParentalStatusViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.parentalStatusViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('paymentsAccount', () => {
            const fakePath = "/rendered/path/paymentsAccount";
            const expectedParameters = {
                customer_id: "customerIdValue",
                payments_account_id: "paymentsAccountIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.paymentsAccountPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.paymentsAccountPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('paymentsAccountPath', () => {
                const result = client.paymentsAccountPath("customerIdValue", "paymentsAccountIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.paymentsAccountPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromPaymentsAccountName', () => {
                const result = client.matchCustomerIdFromPaymentsAccountName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.paymentsAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPaymentsAccountIdFromPaymentsAccountName', () => {
                const result = client.matchPaymentsAccountIdFromPaymentsAccountName(fakePath);
                assert.strictEqual(result, "paymentsAccountIdValue");
                assert((client.pathTemplates.paymentsAccountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('perStoreView', () => {
            const fakePath = "/rendered/path/perStoreView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                place_id: "placeIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.perStoreViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.perStoreViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('perStoreViewPath', () => {
                const result = client.perStoreViewPath("customerIdValue", "placeIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.perStoreViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromPerStoreViewName', () => {
                const result = client.matchCustomerIdFromPerStoreViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.perStoreViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchPlaceIdFromPerStoreViewName', () => {
                const result = client.matchPlaceIdFromPerStoreViewName(fakePath);
                assert.strictEqual(result, "placeIdValue");
                assert((client.pathTemplates.perStoreViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('productCategoryConstant', () => {
            const fakePath = "/rendered/path/productCategoryConstant";
            const expectedParameters = {
                level: "levelValue",
                category_id: "categoryIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productCategoryConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productCategoryConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productCategoryConstantPath', () => {
                const result = client.productCategoryConstantPath("levelValue", "categoryIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productCategoryConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchLevelFromProductCategoryConstantName', () => {
                const result = client.matchLevelFromProductCategoryConstantName(fakePath);
                assert.strictEqual(result, "levelValue");
                assert((client.pathTemplates.productCategoryConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCategoryIdFromProductCategoryConstantName', () => {
                const result = client.matchCategoryIdFromProductCategoryConstantName(fakePath);
                assert.strictEqual(result, "categoryIdValue");
                assert((client.pathTemplates.productCategoryConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('productGroupView', () => {
            const fakePath = "/rendered/path/productGroupView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                adgroup_id: "adgroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productGroupViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productGroupViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productGroupViewPath', () => {
                const result = client.productGroupViewPath("customerIdValue", "adgroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productGroupViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromProductGroupViewName', () => {
                const result = client.matchCustomerIdFromProductGroupViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.productGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdgroupIdFromProductGroupViewName', () => {
                const result = client.matchAdgroupIdFromProductGroupViewName(fakePath);
                assert.strictEqual(result, "adgroupIdValue");
                assert((client.pathTemplates.productGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromProductGroupViewName', () => {
                const result = client.matchCriterionIdFromProductGroupViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.productGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('productLink', () => {
            const fakePath = "/rendered/path/productLink";
            const expectedParameters = {
                customer_id: "customerIdValue",
                product_link_id: "productLinkIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productLinkPath', () => {
                const result = client.productLinkPath("customerIdValue", "productLinkIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromProductLinkName', () => {
                const result = client.matchCustomerIdFromProductLinkName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.productLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchProductLinkIdFromProductLinkName', () => {
                const result = client.matchProductLinkIdFromProductLinkName(fakePath);
                assert.strictEqual(result, "productLinkIdValue");
                assert((client.pathTemplates.productLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('productLinkInvitation', () => {
            const fakePath = "/rendered/path/productLinkInvitation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                customer_invitation_id: "customerInvitationIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.productLinkInvitationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.productLinkInvitationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('productLinkInvitationPath', () => {
                const result = client.productLinkInvitationPath("customerIdValue", "customerInvitationIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.productLinkInvitationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromProductLinkInvitationName', () => {
                const result = client.matchCustomerIdFromProductLinkInvitationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.productLinkInvitationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerInvitationIdFromProductLinkInvitationName', () => {
                const result = client.matchCustomerInvitationIdFromProductLinkInvitationName(fakePath);
                assert.strictEqual(result, "customerInvitationIdValue");
                assert((client.pathTemplates.productLinkInvitationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('qualifyingQuestion', () => {
            const fakePath = "/rendered/path/qualifyingQuestion";
            const expectedParameters = {
                qualifying_question_id: "qualifyingQuestionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.qualifyingQuestionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.qualifyingQuestionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('qualifyingQuestionPath', () => {
                const result = client.qualifyingQuestionPath("qualifyingQuestionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.qualifyingQuestionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchQualifyingQuestionIdFromQualifyingQuestionName', () => {
                const result = client.matchQualifyingQuestionIdFromQualifyingQuestionName(fakePath);
                assert.strictEqual(result, "qualifyingQuestionIdValue");
                assert((client.pathTemplates.qualifyingQuestionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('recommendation', () => {
            const fakePath = "/rendered/path/recommendation";
            const expectedParameters = {
                customer_id: "customerIdValue",
                recommendation_id: "recommendationIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.recommendationPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.recommendationPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('recommendationPath', () => {
                const result = client.recommendationPath("customerIdValue", "recommendationIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.recommendationPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromRecommendationName', () => {
                const result = client.matchCustomerIdFromRecommendationName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.recommendationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRecommendationIdFromRecommendationName', () => {
                const result = client.matchRecommendationIdFromRecommendationName(fakePath);
                assert.strictEqual(result, "recommendationIdValue");
                assert((client.pathTemplates.recommendationPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('recommendationSubscription', () => {
            const fakePath = "/rendered/path/recommendationSubscription";
            const expectedParameters = {
                customer_id: "customerIdValue",
                recommendation_type: "recommendationTypeValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.recommendationSubscriptionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.recommendationSubscriptionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('recommendationSubscriptionPath', () => {
                const result = client.recommendationSubscriptionPath("customerIdValue", "recommendationTypeValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.recommendationSubscriptionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromRecommendationSubscriptionName', () => {
                const result = client.matchCustomerIdFromRecommendationSubscriptionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.recommendationSubscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRecommendationTypeFromRecommendationSubscriptionName', () => {
                const result = client.matchRecommendationTypeFromRecommendationSubscriptionName(fakePath);
                assert.strictEqual(result, "recommendationTypeValue");
                assert((client.pathTemplates.recommendationSubscriptionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('remarketingAction', () => {
            const fakePath = "/rendered/path/remarketingAction";
            const expectedParameters = {
                customer_id: "customerIdValue",
                remarketing_action_id: "remarketingActionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.remarketingActionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.remarketingActionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('remarketingActionPath', () => {
                const result = client.remarketingActionPath("customerIdValue", "remarketingActionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.remarketingActionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromRemarketingActionName', () => {
                const result = client.matchCustomerIdFromRemarketingActionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.remarketingActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchRemarketingActionIdFromRemarketingActionName', () => {
                const result = client.matchRemarketingActionIdFromRemarketingActionName(fakePath);
                assert.strictEqual(result, "remarketingActionIdValue");
                assert((client.pathTemplates.remarketingActionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('searchTermView', () => {
            const fakePath = "/rendered/path/searchTermView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                ad_group_id: "adGroupIdValue",
                query: "queryValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.searchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.searchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('searchTermViewPath', () => {
                const result = client.searchTermViewPath("customerIdValue", "campaignIdValue", "adGroupIdValue", "queryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.searchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromSearchTermViewName', () => {
                const result = client.matchCustomerIdFromSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.searchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromSearchTermViewName', () => {
                const result = client.matchCampaignIdFromSearchTermViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.searchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromSearchTermViewName', () => {
                const result = client.matchAdGroupIdFromSearchTermViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.searchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchQueryFromSearchTermViewName', () => {
                const result = client.matchQueryFromSearchTermViewName(fakePath);
                assert.strictEqual(result, "queryValue");
                assert((client.pathTemplates.searchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sharedCriterion', () => {
            const fakePath = "/rendered/path/sharedCriterion";
            const expectedParameters = {
                customer_id: "customerIdValue",
                shared_set_id: "sharedSetIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sharedCriterionPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sharedCriterionPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sharedCriterionPath', () => {
                const result = client.sharedCriterionPath("customerIdValue", "sharedSetIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sharedCriterionPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromSharedCriterionName', () => {
                const result = client.matchCustomerIdFromSharedCriterionName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.sharedCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSharedSetIdFromSharedCriterionName', () => {
                const result = client.matchSharedSetIdFromSharedCriterionName(fakePath);
                assert.strictEqual(result, "sharedSetIdValue");
                assert((client.pathTemplates.sharedCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromSharedCriterionName', () => {
                const result = client.matchCriterionIdFromSharedCriterionName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.sharedCriterionPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('sharedSet', () => {
            const fakePath = "/rendered/path/sharedSet";
            const expectedParameters = {
                customer_id: "customerIdValue",
                shared_set_id: "sharedSetIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.sharedSetPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.sharedSetPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('sharedSetPath', () => {
                const result = client.sharedSetPath("customerIdValue", "sharedSetIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.sharedSetPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromSharedSetName', () => {
                const result = client.matchCustomerIdFromSharedSetName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.sharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSharedSetIdFromSharedSetName', () => {
                const result = client.matchSharedSetIdFromSharedSetName(fakePath);
                assert.strictEqual(result, "sharedSetIdValue");
                assert((client.pathTemplates.sharedSetPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('shoppingPerformanceView', () => {
            const fakePath = "/rendered/path/shoppingPerformanceView";
            const expectedParameters = {
                customer_id: "customerIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.shoppingPerformanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.shoppingPerformanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('shoppingPerformanceViewPath', () => {
                const result = client.shoppingPerformanceViewPath("customerIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.shoppingPerformanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromShoppingPerformanceViewName', () => {
                const result = client.matchCustomerIdFromShoppingPerformanceViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.shoppingPerformanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('shoppingProduct', () => {
            const fakePath = "/rendered/path/shoppingProduct";
            const expectedParameters = {
                customer_id: "customerIdValue",
                merchant_center_id: "merchantCenterIdValue",
                channel: "channelValue",
                language_code: "languageCodeValue",
                feed_label: "feedLabelValue",
                item_id: "itemIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.shoppingProductPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.shoppingProductPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('shoppingProductPath', () => {
                const result = client.shoppingProductPath("customerIdValue", "merchantCenterIdValue", "channelValue", "languageCodeValue", "feedLabelValue", "itemIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.shoppingProductPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromShoppingProductName', () => {
                const result = client.matchCustomerIdFromShoppingProductName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.shoppingProductPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchMerchantCenterIdFromShoppingProductName', () => {
                const result = client.matchMerchantCenterIdFromShoppingProductName(fakePath);
                assert.strictEqual(result, "merchantCenterIdValue");
                assert((client.pathTemplates.shoppingProductPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchChannelFromShoppingProductName', () => {
                const result = client.matchChannelFromShoppingProductName(fakePath);
                assert.strictEqual(result, "channelValue");
                assert((client.pathTemplates.shoppingProductPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchLanguageCodeFromShoppingProductName', () => {
                const result = client.matchLanguageCodeFromShoppingProductName(fakePath);
                assert.strictEqual(result, "languageCodeValue");
                assert((client.pathTemplates.shoppingProductPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFeedLabelFromShoppingProductName', () => {
                const result = client.matchFeedLabelFromShoppingProductName(fakePath);
                assert.strictEqual(result, "feedLabelValue");
                assert((client.pathTemplates.shoppingProductPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchItemIdFromShoppingProductName', () => {
                const result = client.matchItemIdFromShoppingProductName(fakePath);
                assert.strictEqual(result, "itemIdValue");
                assert((client.pathTemplates.shoppingProductPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('smartCampaignSearchTermView', () => {
            const fakePath = "/rendered/path/smartCampaignSearchTermView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
                query: "queryValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.smartCampaignSearchTermViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.smartCampaignSearchTermViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('smartCampaignSearchTermViewPath', () => {
                const result = client.smartCampaignSearchTermViewPath("customerIdValue", "campaignIdValue", "queryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.smartCampaignSearchTermViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromSmartCampaignSearchTermViewName', () => {
                const result = client.matchCustomerIdFromSmartCampaignSearchTermViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.smartCampaignSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromSmartCampaignSearchTermViewName', () => {
                const result = client.matchCampaignIdFromSmartCampaignSearchTermViewName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.smartCampaignSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchQueryFromSmartCampaignSearchTermViewName', () => {
                const result = client.matchQueryFromSmartCampaignSearchTermViewName(fakePath);
                assert.strictEqual(result, "queryValue");
                assert((client.pathTemplates.smartCampaignSearchTermViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('smartCampaignSetting', () => {
            const fakePath = "/rendered/path/smartCampaignSetting";
            const expectedParameters = {
                customer_id: "customerIdValue",
                campaign_id: "campaignIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.smartCampaignSettingPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.smartCampaignSettingPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('smartCampaignSettingPath', () => {
                const result = client.smartCampaignSettingPath("customerIdValue", "campaignIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.smartCampaignSettingPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromSmartCampaignSettingName', () => {
                const result = client.matchCustomerIdFromSmartCampaignSettingName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.smartCampaignSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCampaignIdFromSmartCampaignSettingName', () => {
                const result = client.matchCampaignIdFromSmartCampaignSettingName(fakePath);
                assert.strictEqual(result, "campaignIdValue");
                assert((client.pathTemplates.smartCampaignSettingPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('thirdPartyAppAnalyticsLink', () => {
            const fakePath = "/rendered/path/thirdPartyAppAnalyticsLink";
            const expectedParameters = {
                customer_id: "customerIdValue",
                customer_link_id: "customerLinkIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.thirdPartyAppAnalyticsLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.thirdPartyAppAnalyticsLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('thirdPartyAppAnalyticsLinkPath', () => {
                const result = client.thirdPartyAppAnalyticsLinkPath("customerIdValue", "customerLinkIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.thirdPartyAppAnalyticsLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromThirdPartyAppAnalyticsLinkName', () => {
                const result = client.matchCustomerIdFromThirdPartyAppAnalyticsLinkName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.thirdPartyAppAnalyticsLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCustomerLinkIdFromThirdPartyAppAnalyticsLinkName', () => {
                const result = client.matchCustomerLinkIdFromThirdPartyAppAnalyticsLinkName(fakePath);
                assert.strictEqual(result, "customerLinkIdValue");
                assert((client.pathTemplates.thirdPartyAppAnalyticsLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('topicConstant', () => {
            const fakePath = "/rendered/path/topicConstant";
            const expectedParameters = {
                topic_id: "topicIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.topicConstantPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.topicConstantPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('topicConstantPath', () => {
                const result = client.topicConstantPath("topicIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.topicConstantPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchTopicIdFromTopicConstantName', () => {
                const result = client.matchTopicIdFromTopicConstantName(fakePath);
                assert.strictEqual(result, "topicIdValue");
                assert((client.pathTemplates.topicConstantPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('topicView', () => {
            const fakePath = "/rendered/path/topicView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.topicViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.topicViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('topicViewPath', () => {
                const result = client.topicViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.topicViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromTopicViewName', () => {
                const result = client.matchCustomerIdFromTopicViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.topicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromTopicViewName', () => {
                const result = client.matchAdGroupIdFromTopicViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.topicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromTopicViewName', () => {
                const result = client.matchCriterionIdFromTopicViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.topicViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('travelActivityGroupView', () => {
            const fakePath = "/rendered/path/travelActivityGroupView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.travelActivityGroupViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.travelActivityGroupViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('travelActivityGroupViewPath', () => {
                const result = client.travelActivityGroupViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.travelActivityGroupViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromTravelActivityGroupViewName', () => {
                const result = client.matchCustomerIdFromTravelActivityGroupViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.travelActivityGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromTravelActivityGroupViewName', () => {
                const result = client.matchAdGroupIdFromTravelActivityGroupViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.travelActivityGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromTravelActivityGroupViewName', () => {
                const result = client.matchCriterionIdFromTravelActivityGroupViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.travelActivityGroupViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('travelActivityPerformanceView', () => {
            const fakePath = "/rendered/path/travelActivityPerformanceView";
            const expectedParameters = {
                customer_id: "customerIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.travelActivityPerformanceViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.travelActivityPerformanceViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('travelActivityPerformanceViewPath', () => {
                const result = client.travelActivityPerformanceViewPath("customerIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.travelActivityPerformanceViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromTravelActivityPerformanceViewName', () => {
                const result = client.matchCustomerIdFromTravelActivityPerformanceViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.travelActivityPerformanceViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userInterest', () => {
            const fakePath = "/rendered/path/userInterest";
            const expectedParameters = {
                customer_id: "customerIdValue",
                user_interest_id: "userInterestIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userInterestPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userInterestPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userInterestPath', () => {
                const result = client.userInterestPath("customerIdValue", "userInterestIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userInterestPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromUserInterestName', () => {
                const result = client.matchCustomerIdFromUserInterestName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.userInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserInterestIdFromUserInterestName', () => {
                const result = client.matchUserInterestIdFromUserInterestName(fakePath);
                assert.strictEqual(result, "userInterestIdValue");
                assert((client.pathTemplates.userInterestPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userList', () => {
            const fakePath = "/rendered/path/userList";
            const expectedParameters = {
                customer_id: "customerIdValue",
                user_list_id: "userListIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userListPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userListPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userListPath', () => {
                const result = client.userListPath("customerIdValue", "userListIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userListPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromUserListName', () => {
                const result = client.matchCustomerIdFromUserListName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.userListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserListIdFromUserListName', () => {
                const result = client.matchUserListIdFromUserListName(fakePath);
                assert.strictEqual(result, "userListIdValue");
                assert((client.pathTemplates.userListPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userListCustomerType', () => {
            const fakePath = "/rendered/path/userListCustomerType";
            const expectedParameters = {
                customer_id: "customerIdValue",
                user_list_id: "userListIdValue",
                semantic_label: "semanticLabelValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userListCustomerTypePathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userListCustomerTypePathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userListCustomerTypePath', () => {
                const result = client.userListCustomerTypePath("customerIdValue", "userListIdValue", "semanticLabelValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userListCustomerTypePathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromUserListCustomerTypeName', () => {
                const result = client.matchCustomerIdFromUserListCustomerTypeName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.userListCustomerTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserListIdFromUserListCustomerTypeName', () => {
                const result = client.matchUserListIdFromUserListCustomerTypeName(fakePath);
                assert.strictEqual(result, "userListIdValue");
                assert((client.pathTemplates.userListCustomerTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchSemanticLabelFromUserListCustomerTypeName', () => {
                const result = client.matchSemanticLabelFromUserListCustomerTypeName(fakePath);
                assert.strictEqual(result, "semanticLabelValue");
                assert((client.pathTemplates.userListCustomerTypePathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('userLocationView', () => {
            const fakePath = "/rendered/path/userLocationView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                country_criterion_id: "countryCriterionIdValue",
                is_targeting_location: "isTargetingLocationValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.userLocationViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.userLocationViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('userLocationViewPath', () => {
                const result = client.userLocationViewPath("customerIdValue", "countryCriterionIdValue", "isTargetingLocationValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.userLocationViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromUserLocationViewName', () => {
                const result = client.matchCustomerIdFromUserLocationViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.userLocationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCountryCriterionIdFromUserLocationViewName', () => {
                const result = client.matchCountryCriterionIdFromUserLocationViewName(fakePath);
                assert.strictEqual(result, "countryCriterionIdValue");
                assert((client.pathTemplates.userLocationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIsTargetingLocationFromUserLocationViewName', () => {
                const result = client.matchIsTargetingLocationFromUserLocationViewName(fakePath);
                assert.strictEqual(result, "isTargetingLocationValue");
                assert((client.pathTemplates.userLocationViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('video', () => {
            const fakePath = "/rendered/path/video";
            const expectedParameters = {
                customer_id: "customerIdValue",
                video_id: "videoIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.videoPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.videoPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('videoPath', () => {
                const result = client.videoPath("customerIdValue", "videoIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.videoPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromVideoName', () => {
                const result = client.matchCustomerIdFromVideoName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.videoPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchVideoIdFromVideoName', () => {
                const result = client.matchVideoIdFromVideoName(fakePath);
                assert.strictEqual(result, "videoIdValue");
                assert((client.pathTemplates.videoPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('webpageView', () => {
            const fakePath = "/rendered/path/webpageView";
            const expectedParameters = {
                customer_id: "customerIdValue",
                ad_group_id: "adGroupIdValue",
                criterion_id: "criterionIdValue",
            };
            const client = new biddingseasonalityadjustmentserviceModule.v17.BiddingSeasonalityAdjustmentServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.webpageViewPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.webpageViewPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('webpageViewPath', () => {
                const result = client.webpageViewPath("customerIdValue", "adGroupIdValue", "criterionIdValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.webpageViewPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchCustomerIdFromWebpageViewName', () => {
                const result = client.matchCustomerIdFromWebpageViewName(fakePath);
                assert.strictEqual(result, "customerIdValue");
                assert((client.pathTemplates.webpageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAdGroupIdFromWebpageViewName', () => {
                const result = client.matchAdGroupIdFromWebpageViewName(fakePath);
                assert.strictEqual(result, "adGroupIdValue");
                assert((client.pathTemplates.webpageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchCriterionIdFromWebpageViewName', () => {
                const result = client.matchCriterionIdFromWebpageViewName(fakePath);
                assert.strictEqual(result, "criterionIdValue");
                assert((client.pathTemplates.webpageViewPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
